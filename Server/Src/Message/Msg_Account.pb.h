// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_Account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Msg_5fAccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Msg_5fAccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Msg_5fAccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Msg_5fAccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_5fAccount_2eproto;
class AccountLog;
class AccountLogDefaultTypeInternal;
extern AccountLogDefaultTypeInternal _AccountLog_default_instance_;
class AccountLoginAck;
class AccountLoginAckDefaultTypeInternal;
extern AccountLoginAckDefaultTypeInternal _AccountLoginAck_default_instance_;
class AccountLoginReq;
class AccountLoginReqDefaultTypeInternal;
extern AccountLoginReqDefaultTypeInternal _AccountLoginReq_default_instance_;
class AccountRegAck;
class AccountRegAckDefaultTypeInternal;
extern AccountRegAckDefaultTypeInternal _AccountRegAck_default_instance_;
class AccountRegReq;
class AccountRegReqDefaultTypeInternal;
extern AccountRegReqDefaultTypeInternal _AccountRegReq_default_instance_;
class CheckVersionAck;
class CheckVersionAckDefaultTypeInternal;
extern CheckVersionAckDefaultTypeInternal _CheckVersionAck_default_instance_;
class CheckVersionReq;
class CheckVersionReqDefaultTypeInternal;
extern CheckVersionReqDefaultTypeInternal _CheckVersionReq_default_instance_;
class ClientServerListAck;
class ClientServerListAckDefaultTypeInternal;
extern ClientServerListAckDefaultTypeInternal _ClientServerListAck_default_instance_;
class ClientServerListReq;
class ClientServerListReqDefaultTypeInternal;
extern ClientServerListReqDefaultTypeInternal _ClientServerListReq_default_instance_;
class ClientServerNode;
class ClientServerNodeDefaultTypeInternal;
extern ClientServerNodeDefaultTypeInternal _ClientServerNode_default_instance_;
class SealAccountAck;
class SealAccountAckDefaultTypeInternal;
extern SealAccountAckDefaultTypeInternal _SealAccountAck_default_instance_;
class SealAccountNtf;
class SealAccountNtfDefaultTypeInternal;
extern SealAccountNtfDefaultTypeInternal _SealAccountNtf_default_instance_;
class SealAccountReq;
class SealAccountReqDefaultTypeInternal;
extern SealAccountReqDefaultTypeInternal _SealAccountReq_default_instance_;
class SelectServerAck;
class SelectServerAckDefaultTypeInternal;
extern SelectServerAckDefaultTypeInternal _SelectServerAck_default_instance_;
class SelectServerReq;
class SelectServerReqDefaultTypeInternal;
extern SelectServerReqDefaultTypeInternal _SelectServerReq_default_instance_;
class SetLastServerNty;
class SetLastServerNtyDefaultTypeInternal;
extern SetLastServerNtyDefaultTypeInternal _SetLastServerNty_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AccountLog* Arena::CreateMaybeMessage<::AccountLog>(Arena*);
template<> ::AccountLoginAck* Arena::CreateMaybeMessage<::AccountLoginAck>(Arena*);
template<> ::AccountLoginReq* Arena::CreateMaybeMessage<::AccountLoginReq>(Arena*);
template<> ::AccountRegAck* Arena::CreateMaybeMessage<::AccountRegAck>(Arena*);
template<> ::AccountRegReq* Arena::CreateMaybeMessage<::AccountRegReq>(Arena*);
template<> ::CheckVersionAck* Arena::CreateMaybeMessage<::CheckVersionAck>(Arena*);
template<> ::CheckVersionReq* Arena::CreateMaybeMessage<::CheckVersionReq>(Arena*);
template<> ::ClientServerListAck* Arena::CreateMaybeMessage<::ClientServerListAck>(Arena*);
template<> ::ClientServerListReq* Arena::CreateMaybeMessage<::ClientServerListReq>(Arena*);
template<> ::ClientServerNode* Arena::CreateMaybeMessage<::ClientServerNode>(Arena*);
template<> ::SealAccountAck* Arena::CreateMaybeMessage<::SealAccountAck>(Arena*);
template<> ::SealAccountNtf* Arena::CreateMaybeMessage<::SealAccountNtf>(Arena*);
template<> ::SealAccountReq* Arena::CreateMaybeMessage<::SealAccountReq>(Arena*);
template<> ::SelectServerAck* Arena::CreateMaybeMessage<::SelectServerAck>(Arena*);
template<> ::SelectServerReq* Arena::CreateMaybeMessage<::SelectServerReq>(Arena*);
template<> ::SetLastServerNty* Arena::CreateMaybeMessage<::SetLastServerNty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CheckVersionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckVersionReq) */ {
 public:
  inline CheckVersionReq() : CheckVersionReq(nullptr) {};
  virtual ~CheckVersionReq();

  CheckVersionReq(const CheckVersionReq& from);
  CheckVersionReq(CheckVersionReq&& from) noexcept
    : CheckVersionReq() {
    *this = ::std::move(from);
  }

  inline CheckVersionReq& operator=(const CheckVersionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckVersionReq& operator=(CheckVersionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckVersionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckVersionReq* internal_default_instance() {
    return reinterpret_cast<const CheckVersionReq*>(
               &_CheckVersionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckVersionReq& a, CheckVersionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckVersionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckVersionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckVersionReq* New() const final {
    return CreateMaybeMessage<CheckVersionReq>(nullptr);
  }

  CheckVersionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckVersionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckVersionReq& from);
  void MergeFrom(const CheckVersionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckVersionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckVersionReq";
  }
  protected:
  explicit CheckVersionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientVerionFieldNumber = 1,
    kChannelFieldNumber = 2,
  };
  // string ClientVerion = 1;
  void clear_clientverion();
  const std::string& clientverion() const;
  void set_clientverion(const std::string& value);
  void set_clientverion(std::string&& value);
  void set_clientverion(const char* value);
  void set_clientverion(const char* value, size_t size);
  std::string* mutable_clientverion();
  std::string* release_clientverion();
  void set_allocated_clientverion(std::string* clientverion);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clientverion();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clientverion(
      std::string* clientverion);
  private:
  const std::string& _internal_clientverion() const;
  void _internal_set_clientverion(const std::string& value);
  std::string* _internal_mutable_clientverion();
  public:

  // int32 Channel = 2;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CheckVersionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientverion_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class CheckVersionAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckVersionAck) */ {
 public:
  inline CheckVersionAck() : CheckVersionAck(nullptr) {};
  virtual ~CheckVersionAck();

  CheckVersionAck(const CheckVersionAck& from);
  CheckVersionAck(CheckVersionAck&& from) noexcept
    : CheckVersionAck() {
    *this = ::std::move(from);
  }

  inline CheckVersionAck& operator=(const CheckVersionAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckVersionAck& operator=(CheckVersionAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckVersionAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckVersionAck* internal_default_instance() {
    return reinterpret_cast<const CheckVersionAck*>(
               &_CheckVersionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckVersionAck& a, CheckVersionAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckVersionAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckVersionAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckVersionAck* New() const final {
    return CreateMaybeMessage<CheckVersionAck>(nullptr);
  }

  CheckVersionAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckVersionAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckVersionAck& from);
  void MergeFrom(const CheckVersionAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckVersionAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckVersionAck";
  }
  protected:
  explicit CheckVersionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientVerionFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string ClientVerion = 2;
  void clear_clientverion();
  const std::string& clientverion() const;
  void set_clientverion(const std::string& value);
  void set_clientverion(std::string&& value);
  void set_clientverion(const char* value);
  void set_clientverion(const char* value, size_t size);
  std::string* mutable_clientverion();
  std::string* release_clientverion();
  void set_allocated_clientverion(std::string* clientverion);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clientverion();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clientverion(
      std::string* clientverion);
  private:
  const std::string& _internal_clientverion() const;
  void _internal_set_clientverion(const std::string& value);
  std::string* _internal_mutable_clientverion();
  public:

  // uint32 RetCode = 1;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CheckVersionAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientverion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class AccountLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountLog) */ {
 public:
  inline AccountLog() : AccountLog(nullptr) {};
  virtual ~AccountLog();

  AccountLog(const AccountLog& from);
  AccountLog(AccountLog&& from) noexcept
    : AccountLog() {
    *this = ::std::move(from);
  }

  inline AccountLog& operator=(const AccountLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLog& operator=(AccountLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLog* internal_default_instance() {
    return reinterpret_cast<const AccountLog*>(
               &_AccountLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountLog& a, AccountLog& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountLog* New() const final {
    return CreateMaybeMessage<AccountLog>(nullptr);
  }

  AccountLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountLog& from);
  void MergeFrom(const AccountLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountLog";
  }
  protected:
  explicit AccountLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kUuidFieldNumber = 4,
    kIdfaFieldNumber = 5,
    kImodelFieldNumber = 6,
    kImeiFieldNumber = 7,
    kAccountIDFieldNumber = 3,
    kChannelFieldNumber = 1,
    kIpAddrFieldNumber = 8,
  };
  // string Version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string Uuid = 4;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string Idfa = 5;
  void clear_idfa();
  const std::string& idfa() const;
  void set_idfa(const std::string& value);
  void set_idfa(std::string&& value);
  void set_idfa(const char* value);
  void set_idfa(const char* value, size_t size);
  std::string* mutable_idfa();
  std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_idfa();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_idfa(
      std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // string Imodel = 6;
  void clear_imodel();
  const std::string& imodel() const;
  void set_imodel(const std::string& value);
  void set_imodel(std::string&& value);
  void set_imodel(const char* value);
  void set_imodel(const char* value, size_t size);
  std::string* mutable_imodel();
  std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imodel();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imodel(
      std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // string Imei = 7;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imei();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imei(
      std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // uint64 AccountID = 3;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 Channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 IpAddr = 8;
  void clear_ipaddr();
  ::PROTOBUF_NAMESPACE_ID::int32 ipaddr() const;
  void set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipaddr() const;
  void _internal_set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AccountLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class AccountRegReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountRegReq) */ {
 public:
  inline AccountRegReq() : AccountRegReq(nullptr) {};
  virtual ~AccountRegReq();

  AccountRegReq(const AccountRegReq& from);
  AccountRegReq(AccountRegReq&& from) noexcept
    : AccountRegReq() {
    *this = ::std::move(from);
  }

  inline AccountRegReq& operator=(const AccountRegReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountRegReq& operator=(AccountRegReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountRegReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountRegReq* internal_default_instance() {
    return reinterpret_cast<const AccountRegReq*>(
               &_AccountRegReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountRegReq& a, AccountRegReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountRegReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountRegReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountRegReq* New() const final {
    return CreateMaybeMessage<AccountRegReq>(nullptr);
  }

  AccountRegReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountRegReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountRegReq& from);
  void MergeFrom(const AccountRegReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountRegReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountRegReq";
  }
  protected:
  explicit AccountRegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kRegLogFieldNumber = 4,
    kChannelFieldNumber = 3,
  };
  // string AccountName = 1;
  void clear_accountname();
  const std::string& accountname() const;
  void set_accountname(const std::string& value);
  void set_accountname(std::string&& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  std::string* mutable_accountname();
  std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountname(
      std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .AccountLog RegLog = 4;
  bool has_reglog() const;
  private:
  bool _internal_has_reglog() const;
  public:
  void clear_reglog();
  const ::AccountLog& reglog() const;
  ::AccountLog* release_reglog();
  ::AccountLog* mutable_reglog();
  void set_allocated_reglog(::AccountLog* reglog);
  private:
  const ::AccountLog& _internal_reglog() const;
  ::AccountLog* _internal_mutable_reglog();
  public:
  void unsafe_arena_set_allocated_reglog(
      ::AccountLog* reglog);
  ::AccountLog* unsafe_arena_release_reglog();

  // int32 Channel = 3;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AccountRegReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::AccountLog* reglog_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class AccountRegAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountRegAck) */ {
 public:
  inline AccountRegAck() : AccountRegAck(nullptr) {};
  virtual ~AccountRegAck();

  AccountRegAck(const AccountRegAck& from);
  AccountRegAck(AccountRegAck&& from) noexcept
    : AccountRegAck() {
    *this = ::std::move(from);
  }

  inline AccountRegAck& operator=(const AccountRegAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountRegAck& operator=(AccountRegAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountRegAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountRegAck* internal_default_instance() {
    return reinterpret_cast<const AccountRegAck*>(
               &_AccountRegAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountRegAck& a, AccountRegAck& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountRegAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountRegAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountRegAck* New() const final {
    return CreateMaybeMessage<AccountRegAck>(nullptr);
  }

  AccountRegAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountRegAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountRegAck& from);
  void MergeFrom(const AccountRegAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountRegAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountRegAck";
  }
  protected:
  explicit AccountRegAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // uint64 AccountID = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 RetCode = 1;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AccountRegAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class AccountLoginReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountLoginReq) */ {
 public:
  inline AccountLoginReq() : AccountLoginReq(nullptr) {};
  virtual ~AccountLoginReq();

  AccountLoginReq(const AccountLoginReq& from);
  AccountLoginReq(AccountLoginReq&& from) noexcept
    : AccountLoginReq() {
    *this = ::std::move(from);
  }

  inline AccountLoginReq& operator=(const AccountLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginReq& operator=(AccountLoginReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLoginReq* internal_default_instance() {
    return reinterpret_cast<const AccountLoginReq*>(
               &_AccountLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AccountLoginReq& a, AccountLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountLoginReq* New() const final {
    return CreateMaybeMessage<AccountLoginReq>(nullptr);
  }

  AccountLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountLoginReq& from);
  void MergeFrom(const AccountLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountLoginReq";
  }
  protected:
  explicit AccountLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kLoginLogFieldNumber = 6,
    kChannelFieldNumber = 3,
    kFromChannelFieldNumber = 4,
    kReviewFieldNumber = 5,
  };
  // string AccountName = 1;
  void clear_accountname();
  const std::string& accountname() const;
  void set_accountname(const std::string& value);
  void set_accountname(std::string&& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  std::string* mutable_accountname();
  std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountname(
      std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .AccountLog LoginLog = 6;
  bool has_loginlog() const;
  private:
  bool _internal_has_loginlog() const;
  public:
  void clear_loginlog();
  const ::AccountLog& loginlog() const;
  ::AccountLog* release_loginlog();
  ::AccountLog* mutable_loginlog();
  void set_allocated_loginlog(::AccountLog* loginlog);
  private:
  const ::AccountLog& _internal_loginlog() const;
  ::AccountLog* _internal_mutable_loginlog();
  public:
  void unsafe_arena_set_allocated_loginlog(
      ::AccountLog* loginlog);
  ::AccountLog* unsafe_arena_release_loginlog();

  // int32 Channel = 3;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool FromChannel = 4;
  void clear_fromchannel();
  bool fromchannel() const;
  void set_fromchannel(bool value);
  private:
  bool _internal_fromchannel() const;
  void _internal_set_fromchannel(bool value);
  public:

  // bool Review = 5;
  void clear_review();
  bool review() const;
  void set_review(bool value);
  private:
  bool _internal_review() const;
  void _internal_set_review(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AccountLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::AccountLog* loginlog_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  bool fromchannel_;
  bool review_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class AccountLoginAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountLoginAck) */ {
 public:
  inline AccountLoginAck() : AccountLoginAck(nullptr) {};
  virtual ~AccountLoginAck();

  AccountLoginAck(const AccountLoginAck& from);
  AccountLoginAck(AccountLoginAck&& from) noexcept
    : AccountLoginAck() {
    *this = ::std::move(from);
  }

  inline AccountLoginAck& operator=(const AccountLoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginAck& operator=(AccountLoginAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountLoginAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLoginAck* internal_default_instance() {
    return reinterpret_cast<const AccountLoginAck*>(
               &_AccountLoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AccountLoginAck& a, AccountLoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountLoginAck* New() const final {
    return CreateMaybeMessage<AccountLoginAck>(nullptr);
  }

  AccountLoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountLoginAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountLoginAck& from);
  void MergeFrom(const AccountLoginAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountLoginAck";
  }
  protected:
  explicit AccountLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSvrNameFieldNumber = 4,
    kAccountIDFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kLastSvrIDFieldNumber = 3,
    kReviewFieldNumber = 5,
    kChannelFieldNumber = 6,
    kIpAddrFieldNumber = 7,
  };
  // string LastSvrName = 4;
  void clear_lastsvrname();
  const std::string& lastsvrname() const;
  void set_lastsvrname(const std::string& value);
  void set_lastsvrname(std::string&& value);
  void set_lastsvrname(const char* value);
  void set_lastsvrname(const char* value, size_t size);
  std::string* mutable_lastsvrname();
  std::string* release_lastsvrname();
  void set_allocated_lastsvrname(std::string* lastsvrname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lastsvrname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lastsvrname(
      std::string* lastsvrname);
  private:
  const std::string& _internal_lastsvrname() const;
  void _internal_set_lastsvrname(const std::string& value);
  std::string* _internal_mutable_lastsvrname();
  public:

  // uint64 AccountID = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 RetCode = 1;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 LastSvrID = 3;
  void clear_lastsvrid();
  ::PROTOBUF_NAMESPACE_ID::int32 lastsvrid() const;
  void set_lastsvrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastsvrid() const;
  void _internal_set_lastsvrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Review = 5;
  void clear_review();
  bool review() const;
  void set_review(bool value);
  private:
  bool _internal_review() const;
  void _internal_set_review(bool value);
  public:

  // int32 Channel = 6;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 IpAddr = 7;
  void clear_ipaddr();
  ::PROTOBUF_NAMESPACE_ID::int32 ipaddr() const;
  void set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipaddr() const;
  void _internal_set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AccountLoginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastsvrname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastsvrid_;
  bool review_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class ClientServerListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerListReq) */ {
 public:
  inline ClientServerListReq() : ClientServerListReq(nullptr) {};
  virtual ~ClientServerListReq();

  ClientServerListReq(const ClientServerListReq& from);
  ClientServerListReq(ClientServerListReq&& from) noexcept
    : ClientServerListReq() {
    *this = ::std::move(from);
  }

  inline ClientServerListReq& operator=(const ClientServerListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientServerListReq& operator=(ClientServerListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientServerListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientServerListReq* internal_default_instance() {
    return reinterpret_cast<const ClientServerListReq*>(
               &_ClientServerListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClientServerListReq& a, ClientServerListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientServerListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientServerListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientServerListReq* New() const final {
    return CreateMaybeMessage<ClientServerListReq>(nullptr);
  }

  ClientServerListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientServerListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientServerListReq& from);
  void MergeFrom(const ClientServerListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientServerListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientServerListReq";
  }
  protected:
  explicit ClientServerListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 3,
    kAccountIDFieldNumber = 1,
    kChannelFieldNumber = 2,
    kReviewFieldNumber = 4,
  };
  // string Version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint64 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 Channel = 2;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Review = 4;
  void clear_review();
  bool review() const;
  void set_review(bool value);
  private:
  bool _internal_review() const;
  void _internal_set_review(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientServerListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  bool review_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class ClientServerNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerNode) */ {
 public:
  inline ClientServerNode() : ClientServerNode(nullptr) {};
  virtual ~ClientServerNode();

  ClientServerNode(const ClientServerNode& from);
  ClientServerNode(ClientServerNode&& from) noexcept
    : ClientServerNode() {
    *this = ::std::move(from);
  }

  inline ClientServerNode& operator=(const ClientServerNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientServerNode& operator=(ClientServerNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientServerNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientServerNode* internal_default_instance() {
    return reinterpret_cast<const ClientServerNode*>(
               &_ClientServerNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClientServerNode& a, ClientServerNode& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientServerNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientServerNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientServerNode* New() const final {
    return CreateMaybeMessage<ClientServerNode>(nullptr);
  }

  ClientServerNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientServerNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientServerNode& from);
  void MergeFrom(const ClientServerNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientServerNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientServerNode";
  }
  protected:
  explicit ClientServerNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvrNameFieldNumber = 2,
    kSvrIDFieldNumber = 1,
    kSvrFlagFieldNumber = 3,
    kSvrOpenTimeFieldNumber = 5,
    kCornerMarkFieldNumber = 4,
    kSvrStatusFieldNumber = 6,
  };
  // string SvrName = 2;
  void clear_svrname();
  const std::string& svrname() const;
  void set_svrname(const std::string& value);
  void set_svrname(std::string&& value);
  void set_svrname(const char* value);
  void set_svrname(const char* value, size_t size);
  std::string* mutable_svrname();
  std::string* release_svrname();
  void set_allocated_svrname(std::string* svrname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_svrname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_svrname(
      std::string* svrname);
  private:
  const std::string& _internal_svrname() const;
  void _internal_set_svrname(const std::string& value);
  std::string* _internal_mutable_svrname();
  public:

  // int32 SvrID = 1;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::int32 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SvrFlag = 3;
  void clear_svrflag();
  ::PROTOBUF_NAMESPACE_ID::int32 svrflag() const;
  void set_svrflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_svrflag() const;
  void _internal_set_svrflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 SvrOpenTime = 5;
  void clear_svropentime();
  ::PROTOBUF_NAMESPACE_ID::int64 svropentime() const;
  void set_svropentime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_svropentime() const;
  void _internal_set_svropentime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 CornerMark = 4;
  void clear_cornermark();
  ::PROTOBUF_NAMESPACE_ID::int32 cornermark() const;
  void set_cornermark(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cornermark() const;
  void _internal_set_cornermark(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SvrStatus = 6;
  void clear_svrstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 svrstatus() const;
  void set_svrstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_svrstatus() const;
  void _internal_set_svrstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientServerNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr svrname_;
  ::PROTOBUF_NAMESPACE_ID::int32 svrid_;
  ::PROTOBUF_NAMESPACE_ID::int32 svrflag_;
  ::PROTOBUF_NAMESPACE_ID::int64 svropentime_;
  ::PROTOBUF_NAMESPACE_ID::int32 cornermark_;
  ::PROTOBUF_NAMESPACE_ID::int32 svrstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class ClientServerListAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerListAck) */ {
 public:
  inline ClientServerListAck() : ClientServerListAck(nullptr) {};
  virtual ~ClientServerListAck();

  ClientServerListAck(const ClientServerListAck& from);
  ClientServerListAck(ClientServerListAck&& from) noexcept
    : ClientServerListAck() {
    *this = ::std::move(from);
  }

  inline ClientServerListAck& operator=(const ClientServerListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientServerListAck& operator=(ClientServerListAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientServerListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientServerListAck* internal_default_instance() {
    return reinterpret_cast<const ClientServerListAck*>(
               &_ClientServerListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientServerListAck& a, ClientServerListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientServerListAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientServerListAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientServerListAck* New() const final {
    return CreateMaybeMessage<ClientServerListAck>(nullptr);
  }

  ClientServerListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientServerListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientServerListAck& from);
  void MergeFrom(const ClientServerListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientServerListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientServerListAck";
  }
  protected:
  explicit ClientServerListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvrNodeFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // repeated .ClientServerNode SvrNode = 2;
  int svrnode_size() const;
  private:
  int _internal_svrnode_size() const;
  public:
  void clear_svrnode();
  ::ClientServerNode* mutable_svrnode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerNode >*
      mutable_svrnode();
  private:
  const ::ClientServerNode& _internal_svrnode(int index) const;
  ::ClientServerNode* _internal_add_svrnode();
  public:
  const ::ClientServerNode& svrnode(int index) const;
  ::ClientServerNode* add_svrnode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerNode >&
      svrnode() const;

  // uint32 RetCode = 1;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientServerListAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerNode > svrnode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class SelectServerReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SelectServerReq) */ {
 public:
  inline SelectServerReq() : SelectServerReq(nullptr) {};
  virtual ~SelectServerReq();

  SelectServerReq(const SelectServerReq& from);
  SelectServerReq(SelectServerReq&& from) noexcept
    : SelectServerReq() {
    *this = ::std::move(from);
  }

  inline SelectServerReq& operator=(const SelectServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectServerReq& operator=(SelectServerReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectServerReq* internal_default_instance() {
    return reinterpret_cast<const SelectServerReq*>(
               &_SelectServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SelectServerReq& a, SelectServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectServerReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectServerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectServerReq* New() const final {
    return CreateMaybeMessage<SelectServerReq>(nullptr);
  }

  SelectServerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectServerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectServerReq& from);
  void MergeFrom(const SelectServerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectServerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SelectServerReq";
  }
  protected:
  explicit SelectServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 1,
    kServerIDFieldNumber = 2,
    kCheckRoleFieldNumber = 3,
  };
  // uint64 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 ServerID = 2;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool CheckRole = 3;
  void clear_checkrole();
  bool checkrole() const;
  void set_checkrole(bool value);
  private:
  bool _internal_checkrole() const;
  void _internal_set_checkrole(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SelectServerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  bool checkrole_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class SelectServerAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SelectServerAck) */ {
 public:
  inline SelectServerAck() : SelectServerAck(nullptr) {};
  virtual ~SelectServerAck();

  SelectServerAck(const SelectServerAck& from);
  SelectServerAck(SelectServerAck&& from) noexcept
    : SelectServerAck() {
    *this = ::std::move(from);
  }

  inline SelectServerAck& operator=(const SelectServerAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectServerAck& operator=(SelectServerAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectServerAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectServerAck* internal_default_instance() {
    return reinterpret_cast<const SelectServerAck*>(
               &_SelectServerAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SelectServerAck& a, SelectServerAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectServerAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectServerAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectServerAck* New() const final {
    return CreateMaybeMessage<SelectServerAck>(nullptr);
  }

  SelectServerAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectServerAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectServerAck& from);
  void MergeFrom(const SelectServerAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectServerAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SelectServerAck";
  }
  protected:
  explicit SelectServerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddrFieldNumber = 4,
    kAccountIDFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kServerIDFieldNumber = 3,
    kServerPortFieldNumber = 5,
    kLoginCodeFieldNumber = 6,
  };
  // string ServerAddr = 4;
  void clear_serveraddr();
  const std::string& serveraddr() const;
  void set_serveraddr(const std::string& value);
  void set_serveraddr(std::string&& value);
  void set_serveraddr(const char* value);
  void set_serveraddr(const char* value, size_t size);
  std::string* mutable_serveraddr();
  std::string* release_serveraddr();
  void set_allocated_serveraddr(std::string* serveraddr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serveraddr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serveraddr(
      std::string* serveraddr);
  private:
  const std::string& _internal_serveraddr() const;
  void _internal_set_serveraddr(const std::string& value);
  std::string* _internal_mutable_serveraddr();
  public:

  // uint64 AccountID = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 RetCode = 1;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 ServerID = 3;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ServerPort = 5;
  void clear_serverport();
  ::PROTOBUF_NAMESPACE_ID::int32 serverport() const;
  void set_serverport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverport() const;
  void _internal_set_serverport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LoginCode = 6;
  void clear_logincode();
  ::PROTOBUF_NAMESPACE_ID::int32 logincode() const;
  void set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logincode() const;
  void _internal_set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SelectServerAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serveraddr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverport_;
  ::PROTOBUF_NAMESPACE_ID::int32 logincode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class SealAccountReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SealAccountReq) */ {
 public:
  inline SealAccountReq() : SealAccountReq(nullptr) {};
  virtual ~SealAccountReq();

  SealAccountReq(const SealAccountReq& from);
  SealAccountReq(SealAccountReq&& from) noexcept
    : SealAccountReq() {
    *this = ::std::move(from);
  }

  inline SealAccountReq& operator=(const SealAccountReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SealAccountReq& operator=(SealAccountReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SealAccountReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SealAccountReq* internal_default_instance() {
    return reinterpret_cast<const SealAccountReq*>(
               &_SealAccountReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SealAccountReq& a, SealAccountReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SealAccountReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SealAccountReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SealAccountReq* New() const final {
    return CreateMaybeMessage<SealAccountReq>(nullptr);
  }

  SealAccountReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SealAccountReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SealAccountReq& from);
  void MergeFrom(const SealAccountReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SealAccountReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SealAccountReq";
  }
  protected:
  explicit SealAccountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kAccountIDFieldNumber = 2,
    kChannelFieldNumber = 3,
    kSealTimeFieldNumber = 4,
    kSealFieldNumber = 5,
  };
  // string AccountName = 1;
  void clear_accountname();
  const std::string& accountname() const;
  void set_accountname(const std::string& value);
  void set_accountname(std::string&& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  std::string* mutable_accountname();
  std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountname(
      std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // uint64 AccountID = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 Channel = 3;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SealTime = 4;
  void clear_sealtime();
  ::PROTOBUF_NAMESPACE_ID::int32 sealtime() const;
  void set_sealtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sealtime() const;
  void _internal_set_sealtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Seal = 5;
  void clear_seal();
  bool seal() const;
  void set_seal(bool value);
  private:
  bool _internal_seal() const;
  void _internal_set_seal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SealAccountReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 sealtime_;
  bool seal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class SealAccountAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SealAccountAck) */ {
 public:
  inline SealAccountAck() : SealAccountAck(nullptr) {};
  virtual ~SealAccountAck();

  SealAccountAck(const SealAccountAck& from);
  SealAccountAck(SealAccountAck&& from) noexcept
    : SealAccountAck() {
    *this = ::std::move(from);
  }

  inline SealAccountAck& operator=(const SealAccountAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SealAccountAck& operator=(SealAccountAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SealAccountAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SealAccountAck* internal_default_instance() {
    return reinterpret_cast<const SealAccountAck*>(
               &_SealAccountAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SealAccountAck& a, SealAccountAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SealAccountAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SealAccountAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SealAccountAck* New() const final {
    return CreateMaybeMessage<SealAccountAck>(nullptr);
  }

  SealAccountAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SealAccountAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SealAccountAck& from);
  void MergeFrom(const SealAccountAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SealAccountAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SealAccountAck";
  }
  protected:
  explicit SealAccountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kServerIDFieldNumber = 4,
    kAccountIDFieldNumber = 3,
  };
  // string AccountName = 2;
  void clear_accountname();
  const std::string& accountname() const;
  void set_accountname(const std::string& value);
  void set_accountname(std::string&& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  std::string* mutable_accountname();
  std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountname(
      std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // uint32 RetCode = 1;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 ServerID = 4;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 AccountID = 3;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SealAccountAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class SealAccountNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SealAccountNtf) */ {
 public:
  inline SealAccountNtf() : SealAccountNtf(nullptr) {};
  virtual ~SealAccountNtf();

  SealAccountNtf(const SealAccountNtf& from);
  SealAccountNtf(SealAccountNtf&& from) noexcept
    : SealAccountNtf() {
    *this = ::std::move(from);
  }

  inline SealAccountNtf& operator=(const SealAccountNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline SealAccountNtf& operator=(SealAccountNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SealAccountNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SealAccountNtf* internal_default_instance() {
    return reinterpret_cast<const SealAccountNtf*>(
               &_SealAccountNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SealAccountNtf& a, SealAccountNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(SealAccountNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SealAccountNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SealAccountNtf* New() const final {
    return CreateMaybeMessage<SealAccountNtf>(nullptr);
  }

  SealAccountNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SealAccountNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SealAccountNtf& from);
  void MergeFrom(const SealAccountNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SealAccountNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SealAccountNtf";
  }
  protected:
  explicit SealAccountNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 1,
  };
  // uint64 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SealAccountNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// -------------------------------------------------------------------

class SetLastServerNty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetLastServerNty) */ {
 public:
  inline SetLastServerNty() : SetLastServerNty(nullptr) {};
  virtual ~SetLastServerNty();

  SetLastServerNty(const SetLastServerNty& from);
  SetLastServerNty(SetLastServerNty&& from) noexcept
    : SetLastServerNty() {
    *this = ::std::move(from);
  }

  inline SetLastServerNty& operator=(const SetLastServerNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLastServerNty& operator=(SetLastServerNty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLastServerNty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLastServerNty* internal_default_instance() {
    return reinterpret_cast<const SetLastServerNty*>(
               &_SetLastServerNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetLastServerNty& a, SetLastServerNty& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLastServerNty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLastServerNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLastServerNty* New() const final {
    return CreateMaybeMessage<SetLastServerNty>(nullptr);
  }

  SetLastServerNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLastServerNty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLastServerNty& from);
  void MergeFrom(const SetLastServerNty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLastServerNty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetLastServerNty";
  }
  protected:
  explicit SetLastServerNty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_5fAccount_2eproto);
    return ::descriptor_table_Msg_5fAccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 1,
    kServerIDFieldNumber = 2,
  };
  // uint64 AccountID = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 ServerID = 2;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SetLastServerNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Msg_5fAccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckVersionReq

// string ClientVerion = 1;
inline void CheckVersionReq::clear_clientverion() {
  clientverion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CheckVersionReq::clientverion() const {
  // @@protoc_insertion_point(field_get:CheckVersionReq.ClientVerion)
  return _internal_clientverion();
}
inline void CheckVersionReq::set_clientverion(const std::string& value) {
  _internal_set_clientverion(value);
  // @@protoc_insertion_point(field_set:CheckVersionReq.ClientVerion)
}
inline std::string* CheckVersionReq::mutable_clientverion() {
  // @@protoc_insertion_point(field_mutable:CheckVersionReq.ClientVerion)
  return _internal_mutable_clientverion();
}
inline const std::string& CheckVersionReq::_internal_clientverion() const {
  return clientverion_.Get();
}
inline void CheckVersionReq::_internal_set_clientverion(const std::string& value) {
  
  clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckVersionReq::set_clientverion(std::string&& value) {
  
  clientverion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CheckVersionReq.ClientVerion)
}
inline void CheckVersionReq::set_clientverion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CheckVersionReq.ClientVerion)
}
inline void CheckVersionReq::set_clientverion(const char* value,
    size_t size) {
  
  clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CheckVersionReq.ClientVerion)
}
inline std::string* CheckVersionReq::_internal_mutable_clientverion() {
  
  return clientverion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckVersionReq::release_clientverion() {
  // @@protoc_insertion_point(field_release:CheckVersionReq.ClientVerion)
  return clientverion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckVersionReq::set_allocated_clientverion(std::string* clientverion) {
  if (clientverion != nullptr) {
    
  } else {
    
  }
  clientverion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientverion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CheckVersionReq.ClientVerion)
}
inline std::string* CheckVersionReq::unsafe_arena_release_clientverion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CheckVersionReq.ClientVerion)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return clientverion_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CheckVersionReq::unsafe_arena_set_allocated_clientverion(
    std::string* clientverion) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clientverion != nullptr) {
    
  } else {
    
  }
  clientverion_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clientverion, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CheckVersionReq.ClientVerion)
}

// int32 Channel = 2;
inline void CheckVersionReq::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckVersionReq::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckVersionReq::channel() const {
  // @@protoc_insertion_point(field_get:CheckVersionReq.Channel)
  return _internal_channel();
}
inline void CheckVersionReq::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void CheckVersionReq::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CheckVersionReq.Channel)
}

// -------------------------------------------------------------------

// CheckVersionAck

// uint32 RetCode = 1;
inline void CheckVersionAck::clear_retcode() {
  retcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckVersionAck::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckVersionAck::retcode() const {
  // @@protoc_insertion_point(field_get:CheckVersionAck.RetCode)
  return _internal_retcode();
}
inline void CheckVersionAck::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retcode_ = value;
}
inline void CheckVersionAck::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:CheckVersionAck.RetCode)
}

// string ClientVerion = 2;
inline void CheckVersionAck::clear_clientverion() {
  clientverion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CheckVersionAck::clientverion() const {
  // @@protoc_insertion_point(field_get:CheckVersionAck.ClientVerion)
  return _internal_clientverion();
}
inline void CheckVersionAck::set_clientverion(const std::string& value) {
  _internal_set_clientverion(value);
  // @@protoc_insertion_point(field_set:CheckVersionAck.ClientVerion)
}
inline std::string* CheckVersionAck::mutable_clientverion() {
  // @@protoc_insertion_point(field_mutable:CheckVersionAck.ClientVerion)
  return _internal_mutable_clientverion();
}
inline const std::string& CheckVersionAck::_internal_clientverion() const {
  return clientverion_.Get();
}
inline void CheckVersionAck::_internal_set_clientverion(const std::string& value) {
  
  clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckVersionAck::set_clientverion(std::string&& value) {
  
  clientverion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CheckVersionAck.ClientVerion)
}
inline void CheckVersionAck::set_clientverion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CheckVersionAck.ClientVerion)
}
inline void CheckVersionAck::set_clientverion(const char* value,
    size_t size) {
  
  clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CheckVersionAck.ClientVerion)
}
inline std::string* CheckVersionAck::_internal_mutable_clientverion() {
  
  return clientverion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckVersionAck::release_clientverion() {
  // @@protoc_insertion_point(field_release:CheckVersionAck.ClientVerion)
  return clientverion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckVersionAck::set_allocated_clientverion(std::string* clientverion) {
  if (clientverion != nullptr) {
    
  } else {
    
  }
  clientverion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientverion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CheckVersionAck.ClientVerion)
}
inline std::string* CheckVersionAck::unsafe_arena_release_clientverion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CheckVersionAck.ClientVerion)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return clientverion_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CheckVersionAck::unsafe_arena_set_allocated_clientverion(
    std::string* clientverion) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clientverion != nullptr) {
    
  } else {
    
  }
  clientverion_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clientverion, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CheckVersionAck.ClientVerion)
}

// -------------------------------------------------------------------

// AccountLog

// int32 Channel = 1;
inline void AccountLog::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLog::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLog::channel() const {
  // @@protoc_insertion_point(field_get:AccountLog.Channel)
  return _internal_channel();
}
inline void AccountLog::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void AccountLog::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:AccountLog.Channel)
}

// string Version = 2;
inline void AccountLog::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLog::version() const {
  // @@protoc_insertion_point(field_get:AccountLog.Version)
  return _internal_version();
}
inline void AccountLog::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:AccountLog.Version)
}
inline std::string* AccountLog::mutable_version() {
  // @@protoc_insertion_point(field_mutable:AccountLog.Version)
  return _internal_mutable_version();
}
inline const std::string& AccountLog::_internal_version() const {
  return version_.Get();
}
inline void AccountLog::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLog::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLog.Version)
}
inline void AccountLog::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLog.Version)
}
inline void AccountLog::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLog.Version)
}
inline std::string* AccountLog::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLog::release_version() {
  // @@protoc_insertion_point(field_release:AccountLog.Version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLog::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLog.Version)
}
inline std::string* AccountLog::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLog.Version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLog::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLog.Version)
}

// uint64 AccountID = 3;
inline void AccountLog::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountLog::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountLog::accountid() const {
  // @@protoc_insertion_point(field_get:AccountLog.AccountID)
  return _internal_accountid();
}
inline void AccountLog::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void AccountLog::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:AccountLog.AccountID)
}

// string Uuid = 4;
inline void AccountLog::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLog::uuid() const {
  // @@protoc_insertion_point(field_get:AccountLog.Uuid)
  return _internal_uuid();
}
inline void AccountLog::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:AccountLog.Uuid)
}
inline std::string* AccountLog::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:AccountLog.Uuid)
  return _internal_mutable_uuid();
}
inline const std::string& AccountLog::_internal_uuid() const {
  return uuid_.Get();
}
inline void AccountLog::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLog::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLog.Uuid)
}
inline void AccountLog::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLog.Uuid)
}
inline void AccountLog::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLog.Uuid)
}
inline std::string* AccountLog::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLog::release_uuid() {
  // @@protoc_insertion_point(field_release:AccountLog.Uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLog::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLog.Uuid)
}
inline std::string* AccountLog::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLog.Uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLog::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLog.Uuid)
}

// string Idfa = 5;
inline void AccountLog::clear_idfa() {
  idfa_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLog::idfa() const {
  // @@protoc_insertion_point(field_get:AccountLog.Idfa)
  return _internal_idfa();
}
inline void AccountLog::set_idfa(const std::string& value) {
  _internal_set_idfa(value);
  // @@protoc_insertion_point(field_set:AccountLog.Idfa)
}
inline std::string* AccountLog::mutable_idfa() {
  // @@protoc_insertion_point(field_mutable:AccountLog.Idfa)
  return _internal_mutable_idfa();
}
inline const std::string& AccountLog::_internal_idfa() const {
  return idfa_.Get();
}
inline void AccountLog::_internal_set_idfa(const std::string& value) {
  
  idfa_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLog::set_idfa(std::string&& value) {
  
  idfa_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLog.Idfa)
}
inline void AccountLog::set_idfa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idfa_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLog.Idfa)
}
inline void AccountLog::set_idfa(const char* value,
    size_t size) {
  
  idfa_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLog.Idfa)
}
inline std::string* AccountLog::_internal_mutable_idfa() {
  
  return idfa_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLog::release_idfa() {
  // @@protoc_insertion_point(field_release:AccountLog.Idfa)
  return idfa_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLog::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    
  } else {
    
  }
  idfa_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idfa,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLog.Idfa)
}
inline std::string* AccountLog::unsafe_arena_release_idfa() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLog.Idfa)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return idfa_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLog::unsafe_arena_set_allocated_idfa(
    std::string* idfa) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (idfa != nullptr) {
    
  } else {
    
  }
  idfa_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      idfa, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLog.Idfa)
}

// string Imodel = 6;
inline void AccountLog::clear_imodel() {
  imodel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLog::imodel() const {
  // @@protoc_insertion_point(field_get:AccountLog.Imodel)
  return _internal_imodel();
}
inline void AccountLog::set_imodel(const std::string& value) {
  _internal_set_imodel(value);
  // @@protoc_insertion_point(field_set:AccountLog.Imodel)
}
inline std::string* AccountLog::mutable_imodel() {
  // @@protoc_insertion_point(field_mutable:AccountLog.Imodel)
  return _internal_mutable_imodel();
}
inline const std::string& AccountLog::_internal_imodel() const {
  return imodel_.Get();
}
inline void AccountLog::_internal_set_imodel(const std::string& value) {
  
  imodel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLog::set_imodel(std::string&& value) {
  
  imodel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLog.Imodel)
}
inline void AccountLog::set_imodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imodel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLog.Imodel)
}
inline void AccountLog::set_imodel(const char* value,
    size_t size) {
  
  imodel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLog.Imodel)
}
inline std::string* AccountLog::_internal_mutable_imodel() {
  
  return imodel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLog::release_imodel() {
  // @@protoc_insertion_point(field_release:AccountLog.Imodel)
  return imodel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLog::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    
  } else {
    
  }
  imodel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imodel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLog.Imodel)
}
inline std::string* AccountLog::unsafe_arena_release_imodel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLog.Imodel)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imodel_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLog::unsafe_arena_set_allocated_imodel(
    std::string* imodel) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imodel != nullptr) {
    
  } else {
    
  }
  imodel_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imodel, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLog.Imodel)
}

// string Imei = 7;
inline void AccountLog::clear_imei() {
  imei_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLog::imei() const {
  // @@protoc_insertion_point(field_get:AccountLog.Imei)
  return _internal_imei();
}
inline void AccountLog::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:AccountLog.Imei)
}
inline std::string* AccountLog::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:AccountLog.Imei)
  return _internal_mutable_imei();
}
inline const std::string& AccountLog::_internal_imei() const {
  return imei_.Get();
}
inline void AccountLog::_internal_set_imei(const std::string& value) {
  
  imei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLog::set_imei(std::string&& value) {
  
  imei_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLog.Imei)
}
inline void AccountLog::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLog.Imei)
}
inline void AccountLog::set_imei(const char* value,
    size_t size) {
  
  imei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLog.Imei)
}
inline std::string* AccountLog::_internal_mutable_imei() {
  
  return imei_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLog::release_imei() {
  // @@protoc_insertion_point(field_release:AccountLog.Imei)
  return imei_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLog::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLog.Imei)
}
inline std::string* AccountLog::unsafe_arena_release_imei() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLog.Imei)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imei_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLog::unsafe_arena_set_allocated_imei(
    std::string* imei) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imei, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLog.Imei)
}

// int32 IpAddr = 8;
inline void AccountLog::clear_ipaddr() {
  ipaddr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLog::_internal_ipaddr() const {
  return ipaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLog::ipaddr() const {
  // @@protoc_insertion_point(field_get:AccountLog.IpAddr)
  return _internal_ipaddr();
}
inline void AccountLog::_internal_set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ipaddr_ = value;
}
inline void AccountLog::set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipaddr(value);
  // @@protoc_insertion_point(field_set:AccountLog.IpAddr)
}

// -------------------------------------------------------------------

// AccountRegReq

// string AccountName = 1;
inline void AccountRegReq::clear_accountname() {
  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountRegReq::accountname() const {
  // @@protoc_insertion_point(field_get:AccountRegReq.AccountName)
  return _internal_accountname();
}
inline void AccountRegReq::set_accountname(const std::string& value) {
  _internal_set_accountname(value);
  // @@protoc_insertion_point(field_set:AccountRegReq.AccountName)
}
inline std::string* AccountRegReq::mutable_accountname() {
  // @@protoc_insertion_point(field_mutable:AccountRegReq.AccountName)
  return _internal_mutable_accountname();
}
inline const std::string& AccountRegReq::_internal_accountname() const {
  return accountname_.Get();
}
inline void AccountRegReq::_internal_set_accountname(const std::string& value) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountRegReq::set_accountname(std::string&& value) {
  
  accountname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountRegReq.AccountName)
}
inline void AccountRegReq::set_accountname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountRegReq.AccountName)
}
inline void AccountRegReq::set_accountname(const char* value,
    size_t size) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountRegReq.AccountName)
}
inline std::string* AccountRegReq::_internal_mutable_accountname() {
  
  return accountname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountRegReq::release_accountname() {
  // @@protoc_insertion_point(field_release:AccountRegReq.AccountName)
  return accountname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountRegReq::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountRegReq.AccountName)
}
inline std::string* AccountRegReq::unsafe_arena_release_accountname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountRegReq.AccountName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return accountname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountRegReq::unsafe_arena_set_allocated_accountname(
    std::string* accountname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountRegReq.AccountName)
}

// string Password = 2;
inline void AccountRegReq::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountRegReq::password() const {
  // @@protoc_insertion_point(field_get:AccountRegReq.Password)
  return _internal_password();
}
inline void AccountRegReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:AccountRegReq.Password)
}
inline std::string* AccountRegReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:AccountRegReq.Password)
  return _internal_mutable_password();
}
inline const std::string& AccountRegReq::_internal_password() const {
  return password_.Get();
}
inline void AccountRegReq::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountRegReq::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountRegReq.Password)
}
inline void AccountRegReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountRegReq.Password)
}
inline void AccountRegReq::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountRegReq.Password)
}
inline std::string* AccountRegReq::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountRegReq::release_password() {
  // @@protoc_insertion_point(field_release:AccountRegReq.Password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountRegReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountRegReq.Password)
}
inline std::string* AccountRegReq::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountRegReq.Password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountRegReq::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountRegReq.Password)
}

// int32 Channel = 3;
inline void AccountRegReq::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountRegReq::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountRegReq::channel() const {
  // @@protoc_insertion_point(field_get:AccountRegReq.Channel)
  return _internal_channel();
}
inline void AccountRegReq::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void AccountRegReq::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:AccountRegReq.Channel)
}

// .AccountLog RegLog = 4;
inline bool AccountRegReq::_internal_has_reglog() const {
  return this != internal_default_instance() && reglog_ != nullptr;
}
inline bool AccountRegReq::has_reglog() const {
  return _internal_has_reglog();
}
inline void AccountRegReq::clear_reglog() {
  if (GetArena() == nullptr && reglog_ != nullptr) {
    delete reglog_;
  }
  reglog_ = nullptr;
}
inline const ::AccountLog& AccountRegReq::_internal_reglog() const {
  const ::AccountLog* p = reglog_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AccountLog*>(
      &::_AccountLog_default_instance_);
}
inline const ::AccountLog& AccountRegReq::reglog() const {
  // @@protoc_insertion_point(field_get:AccountRegReq.RegLog)
  return _internal_reglog();
}
inline void AccountRegReq::unsafe_arena_set_allocated_reglog(
    ::AccountLog* reglog) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reglog_);
  }
  reglog_ = reglog;
  if (reglog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountRegReq.RegLog)
}
inline ::AccountLog* AccountRegReq::release_reglog() {
  auto temp = unsafe_arena_release_reglog();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AccountLog* AccountRegReq::unsafe_arena_release_reglog() {
  // @@protoc_insertion_point(field_release:AccountRegReq.RegLog)
  
  ::AccountLog* temp = reglog_;
  reglog_ = nullptr;
  return temp;
}
inline ::AccountLog* AccountRegReq::_internal_mutable_reglog() {
  
  if (reglog_ == nullptr) {
    auto* p = CreateMaybeMessage<::AccountLog>(GetArena());
    reglog_ = p;
  }
  return reglog_;
}
inline ::AccountLog* AccountRegReq::mutable_reglog() {
  // @@protoc_insertion_point(field_mutable:AccountRegReq.RegLog)
  return _internal_mutable_reglog();
}
inline void AccountRegReq::set_allocated_reglog(::AccountLog* reglog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reglog_;
  }
  if (reglog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reglog);
    if (message_arena != submessage_arena) {
      reglog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reglog, submessage_arena);
    }
    
  } else {
    
  }
  reglog_ = reglog;
  // @@protoc_insertion_point(field_set_allocated:AccountRegReq.RegLog)
}

// -------------------------------------------------------------------

// AccountRegAck

// uint32 RetCode = 1;
inline void AccountRegAck::clear_retcode() {
  retcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountRegAck::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountRegAck::retcode() const {
  // @@protoc_insertion_point(field_get:AccountRegAck.RetCode)
  return _internal_retcode();
}
inline void AccountRegAck::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retcode_ = value;
}
inline void AccountRegAck::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:AccountRegAck.RetCode)
}

// uint64 AccountID = 2;
inline void AccountRegAck::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountRegAck::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountRegAck::accountid() const {
  // @@protoc_insertion_point(field_get:AccountRegAck.AccountID)
  return _internal_accountid();
}
inline void AccountRegAck::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void AccountRegAck::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:AccountRegAck.AccountID)
}

// -------------------------------------------------------------------

// AccountLoginReq

// string AccountName = 1;
inline void AccountLoginReq::clear_accountname() {
  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLoginReq::accountname() const {
  // @@protoc_insertion_point(field_get:AccountLoginReq.AccountName)
  return _internal_accountname();
}
inline void AccountLoginReq::set_accountname(const std::string& value) {
  _internal_set_accountname(value);
  // @@protoc_insertion_point(field_set:AccountLoginReq.AccountName)
}
inline std::string* AccountLoginReq::mutable_accountname() {
  // @@protoc_insertion_point(field_mutable:AccountLoginReq.AccountName)
  return _internal_mutable_accountname();
}
inline const std::string& AccountLoginReq::_internal_accountname() const {
  return accountname_.Get();
}
inline void AccountLoginReq::_internal_set_accountname(const std::string& value) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLoginReq::set_accountname(std::string&& value) {
  
  accountname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLoginReq.AccountName)
}
inline void AccountLoginReq::set_accountname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLoginReq.AccountName)
}
inline void AccountLoginReq::set_accountname(const char* value,
    size_t size) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLoginReq.AccountName)
}
inline std::string* AccountLoginReq::_internal_mutable_accountname() {
  
  return accountname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLoginReq::release_accountname() {
  // @@protoc_insertion_point(field_release:AccountLoginReq.AccountName)
  return accountname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLoginReq::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLoginReq.AccountName)
}
inline std::string* AccountLoginReq::unsafe_arena_release_accountname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLoginReq.AccountName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return accountname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLoginReq::unsafe_arena_set_allocated_accountname(
    std::string* accountname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLoginReq.AccountName)
}

// string Password = 2;
inline void AccountLoginReq::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLoginReq::password() const {
  // @@protoc_insertion_point(field_get:AccountLoginReq.Password)
  return _internal_password();
}
inline void AccountLoginReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:AccountLoginReq.Password)
}
inline std::string* AccountLoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:AccountLoginReq.Password)
  return _internal_mutable_password();
}
inline const std::string& AccountLoginReq::_internal_password() const {
  return password_.Get();
}
inline void AccountLoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLoginReq::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLoginReq.Password)
}
inline void AccountLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLoginReq.Password)
}
inline void AccountLoginReq::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLoginReq.Password)
}
inline std::string* AccountLoginReq::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:AccountLoginReq.Password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLoginReq.Password)
}
inline std::string* AccountLoginReq::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLoginReq.Password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLoginReq::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLoginReq.Password)
}

// int32 Channel = 3;
inline void AccountLoginReq::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginReq::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginReq::channel() const {
  // @@protoc_insertion_point(field_get:AccountLoginReq.Channel)
  return _internal_channel();
}
inline void AccountLoginReq::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void AccountLoginReq::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:AccountLoginReq.Channel)
}

// bool FromChannel = 4;
inline void AccountLoginReq::clear_fromchannel() {
  fromchannel_ = false;
}
inline bool AccountLoginReq::_internal_fromchannel() const {
  return fromchannel_;
}
inline bool AccountLoginReq::fromchannel() const {
  // @@protoc_insertion_point(field_get:AccountLoginReq.FromChannel)
  return _internal_fromchannel();
}
inline void AccountLoginReq::_internal_set_fromchannel(bool value) {
  
  fromchannel_ = value;
}
inline void AccountLoginReq::set_fromchannel(bool value) {
  _internal_set_fromchannel(value);
  // @@protoc_insertion_point(field_set:AccountLoginReq.FromChannel)
}

// bool Review = 5;
inline void AccountLoginReq::clear_review() {
  review_ = false;
}
inline bool AccountLoginReq::_internal_review() const {
  return review_;
}
inline bool AccountLoginReq::review() const {
  // @@protoc_insertion_point(field_get:AccountLoginReq.Review)
  return _internal_review();
}
inline void AccountLoginReq::_internal_set_review(bool value) {
  
  review_ = value;
}
inline void AccountLoginReq::set_review(bool value) {
  _internal_set_review(value);
  // @@protoc_insertion_point(field_set:AccountLoginReq.Review)
}

// .AccountLog LoginLog = 6;
inline bool AccountLoginReq::_internal_has_loginlog() const {
  return this != internal_default_instance() && loginlog_ != nullptr;
}
inline bool AccountLoginReq::has_loginlog() const {
  return _internal_has_loginlog();
}
inline void AccountLoginReq::clear_loginlog() {
  if (GetArena() == nullptr && loginlog_ != nullptr) {
    delete loginlog_;
  }
  loginlog_ = nullptr;
}
inline const ::AccountLog& AccountLoginReq::_internal_loginlog() const {
  const ::AccountLog* p = loginlog_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AccountLog*>(
      &::_AccountLog_default_instance_);
}
inline const ::AccountLog& AccountLoginReq::loginlog() const {
  // @@protoc_insertion_point(field_get:AccountLoginReq.LoginLog)
  return _internal_loginlog();
}
inline void AccountLoginReq::unsafe_arena_set_allocated_loginlog(
    ::AccountLog* loginlog) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginlog_);
  }
  loginlog_ = loginlog;
  if (loginlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLoginReq.LoginLog)
}
inline ::AccountLog* AccountLoginReq::release_loginlog() {
  auto temp = unsafe_arena_release_loginlog();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AccountLog* AccountLoginReq::unsafe_arena_release_loginlog() {
  // @@protoc_insertion_point(field_release:AccountLoginReq.LoginLog)
  
  ::AccountLog* temp = loginlog_;
  loginlog_ = nullptr;
  return temp;
}
inline ::AccountLog* AccountLoginReq::_internal_mutable_loginlog() {
  
  if (loginlog_ == nullptr) {
    auto* p = CreateMaybeMessage<::AccountLog>(GetArena());
    loginlog_ = p;
  }
  return loginlog_;
}
inline ::AccountLog* AccountLoginReq::mutable_loginlog() {
  // @@protoc_insertion_point(field_mutable:AccountLoginReq.LoginLog)
  return _internal_mutable_loginlog();
}
inline void AccountLoginReq::set_allocated_loginlog(::AccountLog* loginlog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loginlog_;
  }
  if (loginlog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loginlog);
    if (message_arena != submessage_arena) {
      loginlog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginlog, submessage_arena);
    }
    
  } else {
    
  }
  loginlog_ = loginlog;
  // @@protoc_insertion_point(field_set_allocated:AccountLoginReq.LoginLog)
}

// -------------------------------------------------------------------

// AccountLoginAck

// uint32 RetCode = 1;
inline void AccountLoginAck::clear_retcode() {
  retcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLoginAck::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLoginAck::retcode() const {
  // @@protoc_insertion_point(field_get:AccountLoginAck.RetCode)
  return _internal_retcode();
}
inline void AccountLoginAck::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retcode_ = value;
}
inline void AccountLoginAck::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:AccountLoginAck.RetCode)
}

// uint64 AccountID = 2;
inline void AccountLoginAck::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountLoginAck::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountLoginAck::accountid() const {
  // @@protoc_insertion_point(field_get:AccountLoginAck.AccountID)
  return _internal_accountid();
}
inline void AccountLoginAck::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void AccountLoginAck::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:AccountLoginAck.AccountID)
}

// int32 LastSvrID = 3;
inline void AccountLoginAck::clear_lastsvrid() {
  lastsvrid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginAck::_internal_lastsvrid() const {
  return lastsvrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginAck::lastsvrid() const {
  // @@protoc_insertion_point(field_get:AccountLoginAck.LastSvrID)
  return _internal_lastsvrid();
}
inline void AccountLoginAck::_internal_set_lastsvrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastsvrid_ = value;
}
inline void AccountLoginAck::set_lastsvrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastsvrid(value);
  // @@protoc_insertion_point(field_set:AccountLoginAck.LastSvrID)
}

// string LastSvrName = 4;
inline void AccountLoginAck::clear_lastsvrname() {
  lastsvrname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountLoginAck::lastsvrname() const {
  // @@protoc_insertion_point(field_get:AccountLoginAck.LastSvrName)
  return _internal_lastsvrname();
}
inline void AccountLoginAck::set_lastsvrname(const std::string& value) {
  _internal_set_lastsvrname(value);
  // @@protoc_insertion_point(field_set:AccountLoginAck.LastSvrName)
}
inline std::string* AccountLoginAck::mutable_lastsvrname() {
  // @@protoc_insertion_point(field_mutable:AccountLoginAck.LastSvrName)
  return _internal_mutable_lastsvrname();
}
inline const std::string& AccountLoginAck::_internal_lastsvrname() const {
  return lastsvrname_.Get();
}
inline void AccountLoginAck::_internal_set_lastsvrname(const std::string& value) {
  
  lastsvrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountLoginAck::set_lastsvrname(std::string&& value) {
  
  lastsvrname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AccountLoginAck.LastSvrName)
}
inline void AccountLoginAck::set_lastsvrname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastsvrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AccountLoginAck.LastSvrName)
}
inline void AccountLoginAck::set_lastsvrname(const char* value,
    size_t size) {
  
  lastsvrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AccountLoginAck.LastSvrName)
}
inline std::string* AccountLoginAck::_internal_mutable_lastsvrname() {
  
  return lastsvrname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountLoginAck::release_lastsvrname() {
  // @@protoc_insertion_point(field_release:AccountLoginAck.LastSvrName)
  return lastsvrname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountLoginAck::set_allocated_lastsvrname(std::string* lastsvrname) {
  if (lastsvrname != nullptr) {
    
  } else {
    
  }
  lastsvrname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastsvrname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AccountLoginAck.LastSvrName)
}
inline std::string* AccountLoginAck::unsafe_arena_release_lastsvrname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountLoginAck.LastSvrName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lastsvrname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountLoginAck::unsafe_arena_set_allocated_lastsvrname(
    std::string* lastsvrname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lastsvrname != nullptr) {
    
  } else {
    
  }
  lastsvrname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lastsvrname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountLoginAck.LastSvrName)
}

// bool Review = 5;
inline void AccountLoginAck::clear_review() {
  review_ = false;
}
inline bool AccountLoginAck::_internal_review() const {
  return review_;
}
inline bool AccountLoginAck::review() const {
  // @@protoc_insertion_point(field_get:AccountLoginAck.Review)
  return _internal_review();
}
inline void AccountLoginAck::_internal_set_review(bool value) {
  
  review_ = value;
}
inline void AccountLoginAck::set_review(bool value) {
  _internal_set_review(value);
  // @@protoc_insertion_point(field_set:AccountLoginAck.Review)
}

// int32 Channel = 6;
inline void AccountLoginAck::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginAck::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginAck::channel() const {
  // @@protoc_insertion_point(field_get:AccountLoginAck.Channel)
  return _internal_channel();
}
inline void AccountLoginAck::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void AccountLoginAck::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:AccountLoginAck.Channel)
}

// int32 IpAddr = 7;
inline void AccountLoginAck::clear_ipaddr() {
  ipaddr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginAck::_internal_ipaddr() const {
  return ipaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountLoginAck::ipaddr() const {
  // @@protoc_insertion_point(field_get:AccountLoginAck.IpAddr)
  return _internal_ipaddr();
}
inline void AccountLoginAck::_internal_set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ipaddr_ = value;
}
inline void AccountLoginAck::set_ipaddr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipaddr(value);
  // @@protoc_insertion_point(field_set:AccountLoginAck.IpAddr)
}

// -------------------------------------------------------------------

// ClientServerListReq

// uint64 AccountID = 1;
inline void ClientServerListReq::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientServerListReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientServerListReq::accountid() const {
  // @@protoc_insertion_point(field_get:ClientServerListReq.AccountID)
  return _internal_accountid();
}
inline void ClientServerListReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void ClientServerListReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:ClientServerListReq.AccountID)
}

// int32 Channel = 2;
inline void ClientServerListReq::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerListReq::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerListReq::channel() const {
  // @@protoc_insertion_point(field_get:ClientServerListReq.Channel)
  return _internal_channel();
}
inline void ClientServerListReq::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void ClientServerListReq::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:ClientServerListReq.Channel)
}

// string Version = 3;
inline void ClientServerListReq::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientServerListReq::version() const {
  // @@protoc_insertion_point(field_get:ClientServerListReq.Version)
  return _internal_version();
}
inline void ClientServerListReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientServerListReq.Version)
}
inline std::string* ClientServerListReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientServerListReq.Version)
  return _internal_mutable_version();
}
inline const std::string& ClientServerListReq::_internal_version() const {
  return version_.Get();
}
inline void ClientServerListReq::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientServerListReq::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientServerListReq.Version)
}
inline void ClientServerListReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientServerListReq.Version)
}
inline void ClientServerListReq::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientServerListReq.Version)
}
inline std::string* ClientServerListReq::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientServerListReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientServerListReq.Version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientServerListReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientServerListReq.Version)
}
inline std::string* ClientServerListReq::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientServerListReq.Version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientServerListReq::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientServerListReq.Version)
}

// bool Review = 4;
inline void ClientServerListReq::clear_review() {
  review_ = false;
}
inline bool ClientServerListReq::_internal_review() const {
  return review_;
}
inline bool ClientServerListReq::review() const {
  // @@protoc_insertion_point(field_get:ClientServerListReq.Review)
  return _internal_review();
}
inline void ClientServerListReq::_internal_set_review(bool value) {
  
  review_ = value;
}
inline void ClientServerListReq::set_review(bool value) {
  _internal_set_review(value);
  // @@protoc_insertion_point(field_set:ClientServerListReq.Review)
}

// -------------------------------------------------------------------

// ClientServerNode

// int32 SvrID = 1;
inline void ClientServerNode::clear_svrid() {
  svrid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::svrid() const {
  // @@protoc_insertion_point(field_get:ClientServerNode.SvrID)
  return _internal_svrid();
}
inline void ClientServerNode::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  svrid_ = value;
}
inline void ClientServerNode::set_svrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:ClientServerNode.SvrID)
}

// string SvrName = 2;
inline void ClientServerNode::clear_svrname() {
  svrname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientServerNode::svrname() const {
  // @@protoc_insertion_point(field_get:ClientServerNode.SvrName)
  return _internal_svrname();
}
inline void ClientServerNode::set_svrname(const std::string& value) {
  _internal_set_svrname(value);
  // @@protoc_insertion_point(field_set:ClientServerNode.SvrName)
}
inline std::string* ClientServerNode::mutable_svrname() {
  // @@protoc_insertion_point(field_mutable:ClientServerNode.SvrName)
  return _internal_mutable_svrname();
}
inline const std::string& ClientServerNode::_internal_svrname() const {
  return svrname_.Get();
}
inline void ClientServerNode::_internal_set_svrname(const std::string& value) {
  
  svrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientServerNode::set_svrname(std::string&& value) {
  
  svrname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientServerNode.SvrName)
}
inline void ClientServerNode::set_svrname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  svrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientServerNode.SvrName)
}
inline void ClientServerNode::set_svrname(const char* value,
    size_t size) {
  
  svrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientServerNode.SvrName)
}
inline std::string* ClientServerNode::_internal_mutable_svrname() {
  
  return svrname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientServerNode::release_svrname() {
  // @@protoc_insertion_point(field_release:ClientServerNode.SvrName)
  return svrname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientServerNode::set_allocated_svrname(std::string* svrname) {
  if (svrname != nullptr) {
    
  } else {
    
  }
  svrname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), svrname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientServerNode.SvrName)
}
inline std::string* ClientServerNode::unsafe_arena_release_svrname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientServerNode.SvrName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return svrname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientServerNode::unsafe_arena_set_allocated_svrname(
    std::string* svrname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (svrname != nullptr) {
    
  } else {
    
  }
  svrname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      svrname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientServerNode.SvrName)
}

// int32 SvrFlag = 3;
inline void ClientServerNode::clear_svrflag() {
  svrflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::_internal_svrflag() const {
  return svrflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::svrflag() const {
  // @@protoc_insertion_point(field_get:ClientServerNode.SvrFlag)
  return _internal_svrflag();
}
inline void ClientServerNode::_internal_set_svrflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  svrflag_ = value;
}
inline void ClientServerNode::set_svrflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_svrflag(value);
  // @@protoc_insertion_point(field_set:ClientServerNode.SvrFlag)
}

// int32 CornerMark = 4;
inline void ClientServerNode::clear_cornermark() {
  cornermark_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::_internal_cornermark() const {
  return cornermark_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::cornermark() const {
  // @@protoc_insertion_point(field_get:ClientServerNode.CornerMark)
  return _internal_cornermark();
}
inline void ClientServerNode::_internal_set_cornermark(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cornermark_ = value;
}
inline void ClientServerNode::set_cornermark(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cornermark(value);
  // @@protoc_insertion_point(field_set:ClientServerNode.CornerMark)
}

// int64 SvrOpenTime = 5;
inline void ClientServerNode::clear_svropentime() {
  svropentime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientServerNode::_internal_svropentime() const {
  return svropentime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientServerNode::svropentime() const {
  // @@protoc_insertion_point(field_get:ClientServerNode.SvrOpenTime)
  return _internal_svropentime();
}
inline void ClientServerNode::_internal_set_svropentime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  svropentime_ = value;
}
inline void ClientServerNode::set_svropentime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_svropentime(value);
  // @@protoc_insertion_point(field_set:ClientServerNode.SvrOpenTime)
}

// int32 SvrStatus = 6;
inline void ClientServerNode::clear_svrstatus() {
  svrstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::_internal_svrstatus() const {
  return svrstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientServerNode::svrstatus() const {
  // @@protoc_insertion_point(field_get:ClientServerNode.SvrStatus)
  return _internal_svrstatus();
}
inline void ClientServerNode::_internal_set_svrstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  svrstatus_ = value;
}
inline void ClientServerNode::set_svrstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_svrstatus(value);
  // @@protoc_insertion_point(field_set:ClientServerNode.SvrStatus)
}

// -------------------------------------------------------------------

// ClientServerListAck

// uint32 RetCode = 1;
inline void ClientServerListAck::clear_retcode() {
  retcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientServerListAck::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientServerListAck::retcode() const {
  // @@protoc_insertion_point(field_get:ClientServerListAck.RetCode)
  return _internal_retcode();
}
inline void ClientServerListAck::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retcode_ = value;
}
inline void ClientServerListAck::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:ClientServerListAck.RetCode)
}

// repeated .ClientServerNode SvrNode = 2;
inline int ClientServerListAck::_internal_svrnode_size() const {
  return svrnode_.size();
}
inline int ClientServerListAck::svrnode_size() const {
  return _internal_svrnode_size();
}
inline void ClientServerListAck::clear_svrnode() {
  svrnode_.Clear();
}
inline ::ClientServerNode* ClientServerListAck::mutable_svrnode(int index) {
  // @@protoc_insertion_point(field_mutable:ClientServerListAck.SvrNode)
  return svrnode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerNode >*
ClientServerListAck::mutable_svrnode() {
  // @@protoc_insertion_point(field_mutable_list:ClientServerListAck.SvrNode)
  return &svrnode_;
}
inline const ::ClientServerNode& ClientServerListAck::_internal_svrnode(int index) const {
  return svrnode_.Get(index);
}
inline const ::ClientServerNode& ClientServerListAck::svrnode(int index) const {
  // @@protoc_insertion_point(field_get:ClientServerListAck.SvrNode)
  return _internal_svrnode(index);
}
inline ::ClientServerNode* ClientServerListAck::_internal_add_svrnode() {
  return svrnode_.Add();
}
inline ::ClientServerNode* ClientServerListAck::add_svrnode() {
  // @@protoc_insertion_point(field_add:ClientServerListAck.SvrNode)
  return _internal_add_svrnode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerNode >&
ClientServerListAck::svrnode() const {
  // @@protoc_insertion_point(field_list:ClientServerListAck.SvrNode)
  return svrnode_;
}

// -------------------------------------------------------------------

// SelectServerReq

// uint64 AccountID = 1;
inline void SelectServerReq::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectServerReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectServerReq::accountid() const {
  // @@protoc_insertion_point(field_get:SelectServerReq.AccountID)
  return _internal_accountid();
}
inline void SelectServerReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void SelectServerReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:SelectServerReq.AccountID)
}

// int32 ServerID = 2;
inline void SelectServerReq::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerReq::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerReq::serverid() const {
  // @@protoc_insertion_point(field_get:SelectServerReq.ServerID)
  return _internal_serverid();
}
inline void SelectServerReq::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void SelectServerReq::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:SelectServerReq.ServerID)
}

// bool CheckRole = 3;
inline void SelectServerReq::clear_checkrole() {
  checkrole_ = false;
}
inline bool SelectServerReq::_internal_checkrole() const {
  return checkrole_;
}
inline bool SelectServerReq::checkrole() const {
  // @@protoc_insertion_point(field_get:SelectServerReq.CheckRole)
  return _internal_checkrole();
}
inline void SelectServerReq::_internal_set_checkrole(bool value) {
  
  checkrole_ = value;
}
inline void SelectServerReq::set_checkrole(bool value) {
  _internal_set_checkrole(value);
  // @@protoc_insertion_point(field_set:SelectServerReq.CheckRole)
}

// -------------------------------------------------------------------

// SelectServerAck

// uint32 RetCode = 1;
inline void SelectServerAck::clear_retcode() {
  retcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SelectServerAck::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SelectServerAck::retcode() const {
  // @@protoc_insertion_point(field_get:SelectServerAck.RetCode)
  return _internal_retcode();
}
inline void SelectServerAck::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retcode_ = value;
}
inline void SelectServerAck::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:SelectServerAck.RetCode)
}

// uint64 AccountID = 2;
inline void SelectServerAck::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectServerAck::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectServerAck::accountid() const {
  // @@protoc_insertion_point(field_get:SelectServerAck.AccountID)
  return _internal_accountid();
}
inline void SelectServerAck::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void SelectServerAck::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:SelectServerAck.AccountID)
}

// int32 ServerID = 3;
inline void SelectServerAck::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerAck::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerAck::serverid() const {
  // @@protoc_insertion_point(field_get:SelectServerAck.ServerID)
  return _internal_serverid();
}
inline void SelectServerAck::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void SelectServerAck::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:SelectServerAck.ServerID)
}

// string ServerAddr = 4;
inline void SelectServerAck::clear_serveraddr() {
  serveraddr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SelectServerAck::serveraddr() const {
  // @@protoc_insertion_point(field_get:SelectServerAck.ServerAddr)
  return _internal_serveraddr();
}
inline void SelectServerAck::set_serveraddr(const std::string& value) {
  _internal_set_serveraddr(value);
  // @@protoc_insertion_point(field_set:SelectServerAck.ServerAddr)
}
inline std::string* SelectServerAck::mutable_serveraddr() {
  // @@protoc_insertion_point(field_mutable:SelectServerAck.ServerAddr)
  return _internal_mutable_serveraddr();
}
inline const std::string& SelectServerAck::_internal_serveraddr() const {
  return serveraddr_.Get();
}
inline void SelectServerAck::_internal_set_serveraddr(const std::string& value) {
  
  serveraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SelectServerAck::set_serveraddr(std::string&& value) {
  
  serveraddr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SelectServerAck.ServerAddr)
}
inline void SelectServerAck::set_serveraddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serveraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SelectServerAck.ServerAddr)
}
inline void SelectServerAck::set_serveraddr(const char* value,
    size_t size) {
  
  serveraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SelectServerAck.ServerAddr)
}
inline std::string* SelectServerAck::_internal_mutable_serveraddr() {
  
  return serveraddr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SelectServerAck::release_serveraddr() {
  // @@protoc_insertion_point(field_release:SelectServerAck.ServerAddr)
  return serveraddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SelectServerAck::set_allocated_serveraddr(std::string* serveraddr) {
  if (serveraddr != nullptr) {
    
  } else {
    
  }
  serveraddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serveraddr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SelectServerAck.ServerAddr)
}
inline std::string* SelectServerAck::unsafe_arena_release_serveraddr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SelectServerAck.ServerAddr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serveraddr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SelectServerAck::unsafe_arena_set_allocated_serveraddr(
    std::string* serveraddr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serveraddr != nullptr) {
    
  } else {
    
  }
  serveraddr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serveraddr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SelectServerAck.ServerAddr)
}

// int32 ServerPort = 5;
inline void SelectServerAck::clear_serverport() {
  serverport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerAck::_internal_serverport() const {
  return serverport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerAck::serverport() const {
  // @@protoc_insertion_point(field_get:SelectServerAck.ServerPort)
  return _internal_serverport();
}
inline void SelectServerAck::_internal_set_serverport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverport_ = value;
}
inline void SelectServerAck::set_serverport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverport(value);
  // @@protoc_insertion_point(field_set:SelectServerAck.ServerPort)
}

// int32 LoginCode = 6;
inline void SelectServerAck::clear_logincode() {
  logincode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerAck::_internal_logincode() const {
  return logincode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectServerAck::logincode() const {
  // @@protoc_insertion_point(field_get:SelectServerAck.LoginCode)
  return _internal_logincode();
}
inline void SelectServerAck::_internal_set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logincode_ = value;
}
inline void SelectServerAck::set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logincode(value);
  // @@protoc_insertion_point(field_set:SelectServerAck.LoginCode)
}

// -------------------------------------------------------------------

// SealAccountReq

// string AccountName = 1;
inline void SealAccountReq::clear_accountname() {
  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SealAccountReq::accountname() const {
  // @@protoc_insertion_point(field_get:SealAccountReq.AccountName)
  return _internal_accountname();
}
inline void SealAccountReq::set_accountname(const std::string& value) {
  _internal_set_accountname(value);
  // @@protoc_insertion_point(field_set:SealAccountReq.AccountName)
}
inline std::string* SealAccountReq::mutable_accountname() {
  // @@protoc_insertion_point(field_mutable:SealAccountReq.AccountName)
  return _internal_mutable_accountname();
}
inline const std::string& SealAccountReq::_internal_accountname() const {
  return accountname_.Get();
}
inline void SealAccountReq::_internal_set_accountname(const std::string& value) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SealAccountReq::set_accountname(std::string&& value) {
  
  accountname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SealAccountReq.AccountName)
}
inline void SealAccountReq::set_accountname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SealAccountReq.AccountName)
}
inline void SealAccountReq::set_accountname(const char* value,
    size_t size) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SealAccountReq.AccountName)
}
inline std::string* SealAccountReq::_internal_mutable_accountname() {
  
  return accountname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SealAccountReq::release_accountname() {
  // @@protoc_insertion_point(field_release:SealAccountReq.AccountName)
  return accountname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SealAccountReq::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SealAccountReq.AccountName)
}
inline std::string* SealAccountReq::unsafe_arena_release_accountname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SealAccountReq.AccountName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return accountname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SealAccountReq::unsafe_arena_set_allocated_accountname(
    std::string* accountname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SealAccountReq.AccountName)
}

// uint64 AccountID = 2;
inline void SealAccountReq::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SealAccountReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SealAccountReq::accountid() const {
  // @@protoc_insertion_point(field_get:SealAccountReq.AccountID)
  return _internal_accountid();
}
inline void SealAccountReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void SealAccountReq::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:SealAccountReq.AccountID)
}

// int32 Channel = 3;
inline void SealAccountReq::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SealAccountReq::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SealAccountReq::channel() const {
  // @@protoc_insertion_point(field_get:SealAccountReq.Channel)
  return _internal_channel();
}
inline void SealAccountReq::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void SealAccountReq::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:SealAccountReq.Channel)
}

// int32 SealTime = 4;
inline void SealAccountReq::clear_sealtime() {
  sealtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SealAccountReq::_internal_sealtime() const {
  return sealtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SealAccountReq::sealtime() const {
  // @@protoc_insertion_point(field_get:SealAccountReq.SealTime)
  return _internal_sealtime();
}
inline void SealAccountReq::_internal_set_sealtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sealtime_ = value;
}
inline void SealAccountReq::set_sealtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sealtime(value);
  // @@protoc_insertion_point(field_set:SealAccountReq.SealTime)
}

// bool Seal = 5;
inline void SealAccountReq::clear_seal() {
  seal_ = false;
}
inline bool SealAccountReq::_internal_seal() const {
  return seal_;
}
inline bool SealAccountReq::seal() const {
  // @@protoc_insertion_point(field_get:SealAccountReq.Seal)
  return _internal_seal();
}
inline void SealAccountReq::_internal_set_seal(bool value) {
  
  seal_ = value;
}
inline void SealAccountReq::set_seal(bool value) {
  _internal_set_seal(value);
  // @@protoc_insertion_point(field_set:SealAccountReq.Seal)
}

// -------------------------------------------------------------------

// SealAccountAck

// uint32 RetCode = 1;
inline void SealAccountAck::clear_retcode() {
  retcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SealAccountAck::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SealAccountAck::retcode() const {
  // @@protoc_insertion_point(field_get:SealAccountAck.RetCode)
  return _internal_retcode();
}
inline void SealAccountAck::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retcode_ = value;
}
inline void SealAccountAck::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:SealAccountAck.RetCode)
}

// string AccountName = 2;
inline void SealAccountAck::clear_accountname() {
  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SealAccountAck::accountname() const {
  // @@protoc_insertion_point(field_get:SealAccountAck.AccountName)
  return _internal_accountname();
}
inline void SealAccountAck::set_accountname(const std::string& value) {
  _internal_set_accountname(value);
  // @@protoc_insertion_point(field_set:SealAccountAck.AccountName)
}
inline std::string* SealAccountAck::mutable_accountname() {
  // @@protoc_insertion_point(field_mutable:SealAccountAck.AccountName)
  return _internal_mutable_accountname();
}
inline const std::string& SealAccountAck::_internal_accountname() const {
  return accountname_.Get();
}
inline void SealAccountAck::_internal_set_accountname(const std::string& value) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SealAccountAck::set_accountname(std::string&& value) {
  
  accountname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SealAccountAck.AccountName)
}
inline void SealAccountAck::set_accountname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SealAccountAck.AccountName)
}
inline void SealAccountAck::set_accountname(const char* value,
    size_t size) {
  
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SealAccountAck.AccountName)
}
inline std::string* SealAccountAck::_internal_mutable_accountname() {
  
  return accountname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SealAccountAck::release_accountname() {
  // @@protoc_insertion_point(field_release:SealAccountAck.AccountName)
  return accountname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SealAccountAck::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SealAccountAck.AccountName)
}
inline std::string* SealAccountAck::unsafe_arena_release_accountname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SealAccountAck.AccountName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return accountname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SealAccountAck::unsafe_arena_set_allocated_accountname(
    std::string* accountname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountname != nullptr) {
    
  } else {
    
  }
  accountname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SealAccountAck.AccountName)
}

// uint64 AccountID = 3;
inline void SealAccountAck::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SealAccountAck::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SealAccountAck::accountid() const {
  // @@protoc_insertion_point(field_get:SealAccountAck.AccountID)
  return _internal_accountid();
}
inline void SealAccountAck::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void SealAccountAck::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:SealAccountAck.AccountID)
}

// int32 ServerID = 4;
inline void SealAccountAck::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SealAccountAck::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SealAccountAck::serverid() const {
  // @@protoc_insertion_point(field_get:SealAccountAck.ServerID)
  return _internal_serverid();
}
inline void SealAccountAck::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void SealAccountAck::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:SealAccountAck.ServerID)
}

// -------------------------------------------------------------------

// SealAccountNtf

// uint64 AccountID = 1;
inline void SealAccountNtf::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SealAccountNtf::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SealAccountNtf::accountid() const {
  // @@protoc_insertion_point(field_get:SealAccountNtf.AccountID)
  return _internal_accountid();
}
inline void SealAccountNtf::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void SealAccountNtf::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:SealAccountNtf.AccountID)
}

// -------------------------------------------------------------------

// SetLastServerNty

// uint64 AccountID = 1;
inline void SetLastServerNty::clear_accountid() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetLastServerNty::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetLastServerNty::accountid() const {
  // @@protoc_insertion_point(field_get:SetLastServerNty.AccountID)
  return _internal_accountid();
}
inline void SetLastServerNty::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accountid_ = value;
}
inline void SetLastServerNty::set_accountid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:SetLastServerNty.AccountID)
}

// int32 ServerID = 2;
inline void SetLastServerNty::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLastServerNty::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLastServerNty::serverid() const {
  // @@protoc_insertion_point(field_get:SetLastServerNty.ServerID)
  return _internal_serverid();
}
inline void SetLastServerNty::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void SetLastServerNty::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:SetLastServerNty.ServerID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Msg_5fAccount_2eproto
