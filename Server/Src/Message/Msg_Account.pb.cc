// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_Account.proto

#include "Msg_Account.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fAccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountLog_Msg_5fAccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fAccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientServerNode_Msg_5fAccount_2eproto;
class CheckVersionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckVersionReq> _instance;
} _CheckVersionReq_default_instance_;
class CheckVersionAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckVersionAck> _instance;
} _CheckVersionAck_default_instance_;
class AccountLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountLog> _instance;
} _AccountLog_default_instance_;
class AccountRegReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountRegReq> _instance;
} _AccountRegReq_default_instance_;
class AccountRegAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountRegAck> _instance;
} _AccountRegAck_default_instance_;
class AccountLoginReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountLoginReq> _instance;
} _AccountLoginReq_default_instance_;
class AccountLoginAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountLoginAck> _instance;
} _AccountLoginAck_default_instance_;
class ClientServerListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientServerListReq> _instance;
} _ClientServerListReq_default_instance_;
class ClientServerNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientServerNode> _instance;
} _ClientServerNode_default_instance_;
class ClientServerListAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientServerListAck> _instance;
} _ClientServerListAck_default_instance_;
class SelectServerReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectServerReq> _instance;
} _SelectServerReq_default_instance_;
class SelectServerAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectServerAck> _instance;
} _SelectServerAck_default_instance_;
class SealAccountReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SealAccountReq> _instance;
} _SealAccountReq_default_instance_;
class SealAccountAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SealAccountAck> _instance;
} _SealAccountAck_default_instance_;
class SealAccountNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SealAccountNtf> _instance;
} _SealAccountNtf_default_instance_;
class SetLastServerNtyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLastServerNty> _instance;
} _SetLastServerNty_default_instance_;
static void InitDefaultsscc_info_AccountLog_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountLog_default_instance_;
    new (ptr) ::AccountLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountLog_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountLog_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_AccountLoginAck_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountLoginAck_default_instance_;
    new (ptr) ::AccountLoginAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountLoginAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountLoginAck_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountLoginAck_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_AccountLoginReq_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountLoginReq_default_instance_;
    new (ptr) ::AccountLoginReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountLoginReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountLoginReq_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountLoginReq_Msg_5fAccount_2eproto}, {
      &scc_info_AccountLog_Msg_5fAccount_2eproto.base,}};

static void InitDefaultsscc_info_AccountRegAck_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountRegAck_default_instance_;
    new (ptr) ::AccountRegAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountRegAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountRegAck_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountRegAck_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_AccountRegReq_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountRegReq_default_instance_;
    new (ptr) ::AccountRegReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountRegReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountRegReq_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountRegReq_Msg_5fAccount_2eproto}, {
      &scc_info_AccountLog_Msg_5fAccount_2eproto.base,}};

static void InitDefaultsscc_info_CheckVersionAck_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CheckVersionAck_default_instance_;
    new (ptr) ::CheckVersionAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CheckVersionAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckVersionAck_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckVersionAck_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_CheckVersionReq_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CheckVersionReq_default_instance_;
    new (ptr) ::CheckVersionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CheckVersionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckVersionReq_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckVersionReq_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_ClientServerListAck_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientServerListAck_default_instance_;
    new (ptr) ::ClientServerListAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientServerListAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientServerListAck_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientServerListAck_Msg_5fAccount_2eproto}, {
      &scc_info_ClientServerNode_Msg_5fAccount_2eproto.base,}};

static void InitDefaultsscc_info_ClientServerListReq_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientServerListReq_default_instance_;
    new (ptr) ::ClientServerListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientServerListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientServerListReq_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientServerListReq_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_ClientServerNode_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientServerNode_default_instance_;
    new (ptr) ::ClientServerNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientServerNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientServerNode_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientServerNode_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_SealAccountAck_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SealAccountAck_default_instance_;
    new (ptr) ::SealAccountAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SealAccountAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SealAccountAck_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SealAccountAck_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_SealAccountNtf_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SealAccountNtf_default_instance_;
    new (ptr) ::SealAccountNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SealAccountNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SealAccountNtf_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SealAccountNtf_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_SealAccountReq_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SealAccountReq_default_instance_;
    new (ptr) ::SealAccountReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SealAccountReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SealAccountReq_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SealAccountReq_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_SelectServerAck_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SelectServerAck_default_instance_;
    new (ptr) ::SelectServerAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SelectServerAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectServerAck_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectServerAck_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_SelectServerReq_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SelectServerReq_default_instance_;
    new (ptr) ::SelectServerReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SelectServerReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectServerReq_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectServerReq_Msg_5fAccount_2eproto}, {}};

static void InitDefaultsscc_info_SetLastServerNty_Msg_5fAccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetLastServerNty_default_instance_;
    new (ptr) ::SetLastServerNty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetLastServerNty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLastServerNty_Msg_5fAccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetLastServerNty_Msg_5fAccount_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Msg_5fAccount_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Msg_5fAccount_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Msg_5fAccount_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Msg_5fAccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CheckVersionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CheckVersionReq, clientverion_),
  PROTOBUF_FIELD_OFFSET(::CheckVersionReq, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CheckVersionAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CheckVersionAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::CheckVersionAck, clientverion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccountLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccountLog, channel_),
  PROTOBUF_FIELD_OFFSET(::AccountLog, version_),
  PROTOBUF_FIELD_OFFSET(::AccountLog, accountid_),
  PROTOBUF_FIELD_OFFSET(::AccountLog, uuid_),
  PROTOBUF_FIELD_OFFSET(::AccountLog, idfa_),
  PROTOBUF_FIELD_OFFSET(::AccountLog, imodel_),
  PROTOBUF_FIELD_OFFSET(::AccountLog, imei_),
  PROTOBUF_FIELD_OFFSET(::AccountLog, ipaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccountRegReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccountRegReq, accountname_),
  PROTOBUF_FIELD_OFFSET(::AccountRegReq, password_),
  PROTOBUF_FIELD_OFFSET(::AccountRegReq, channel_),
  PROTOBUF_FIELD_OFFSET(::AccountRegReq, reglog_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccountRegAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccountRegAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::AccountRegAck, accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccountLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccountLoginReq, accountname_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginReq, password_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginReq, channel_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginReq, fromchannel_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginReq, review_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginReq, loginlog_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, accountid_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, lastsvrid_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, lastsvrname_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, review_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, channel_),
  PROTOBUF_FIELD_OFFSET(::AccountLoginAck, ipaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientServerListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientServerListReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::ClientServerListReq, channel_),
  PROTOBUF_FIELD_OFFSET(::ClientServerListReq, version_),
  PROTOBUF_FIELD_OFFSET(::ClientServerListReq, review_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientServerNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientServerNode, svrid_),
  PROTOBUF_FIELD_OFFSET(::ClientServerNode, svrname_),
  PROTOBUF_FIELD_OFFSET(::ClientServerNode, svrflag_),
  PROTOBUF_FIELD_OFFSET(::ClientServerNode, cornermark_),
  PROTOBUF_FIELD_OFFSET(::ClientServerNode, svropentime_),
  PROTOBUF_FIELD_OFFSET(::ClientServerNode, svrstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientServerListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientServerListAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::ClientServerListAck, svrnode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SelectServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SelectServerReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::SelectServerReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::SelectServerReq, checkrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SelectServerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SelectServerAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::SelectServerAck, accountid_),
  PROTOBUF_FIELD_OFFSET(::SelectServerAck, serverid_),
  PROTOBUF_FIELD_OFFSET(::SelectServerAck, serveraddr_),
  PROTOBUF_FIELD_OFFSET(::SelectServerAck, serverport_),
  PROTOBUF_FIELD_OFFSET(::SelectServerAck, logincode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SealAccountReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SealAccountReq, accountname_),
  PROTOBUF_FIELD_OFFSET(::SealAccountReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::SealAccountReq, channel_),
  PROTOBUF_FIELD_OFFSET(::SealAccountReq, sealtime_),
  PROTOBUF_FIELD_OFFSET(::SealAccountReq, seal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SealAccountAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SealAccountAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::SealAccountAck, accountname_),
  PROTOBUF_FIELD_OFFSET(::SealAccountAck, accountid_),
  PROTOBUF_FIELD_OFFSET(::SealAccountAck, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SealAccountNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SealAccountNtf, accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetLastServerNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetLastServerNty, accountid_),
  PROTOBUF_FIELD_OFFSET(::SetLastServerNty, serverid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CheckVersionReq)},
  { 7, -1, sizeof(::CheckVersionAck)},
  { 14, -1, sizeof(::AccountLog)},
  { 27, -1, sizeof(::AccountRegReq)},
  { 36, -1, sizeof(::AccountRegAck)},
  { 43, -1, sizeof(::AccountLoginReq)},
  { 54, -1, sizeof(::AccountLoginAck)},
  { 66, -1, sizeof(::ClientServerListReq)},
  { 75, -1, sizeof(::ClientServerNode)},
  { 86, -1, sizeof(::ClientServerListAck)},
  { 93, -1, sizeof(::SelectServerReq)},
  { 101, -1, sizeof(::SelectServerAck)},
  { 112, -1, sizeof(::SealAccountReq)},
  { 122, -1, sizeof(::SealAccountAck)},
  { 131, -1, sizeof(::SealAccountNtf)},
  { 137, -1, sizeof(::SetLastServerNty)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CheckVersionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CheckVersionAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AccountLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AccountRegReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AccountRegAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AccountLoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AccountLoginAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientServerListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientServerNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientServerListAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SelectServerReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SelectServerAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SealAccountReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SealAccountAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SealAccountNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetLastServerNty_default_instance_),
};

const char descriptor_table_protodef_Msg_5fAccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Msg_Account.proto\"8\n\017CheckVersionReq\022\024"
  "\n\014ClientVerion\030\001 \001(\t\022\017\n\007Channel\030\002 \001(\005\"8\n"
  "\017CheckVersionAck\022\017\n\007RetCode\030\001 \001(\r\022\024\n\014Cli"
  "entVerion\030\002 \001(\t\"\213\001\n\nAccountLog\022\017\n\007Channe"
  "l\030\001 \001(\005\022\017\n\007Version\030\002 \001(\t\022\021\n\tAccountID\030\003 "
  "\001(\004\022\014\n\004Uuid\030\004 \001(\t\022\014\n\004Idfa\030\005 \001(\t\022\016\n\006Imode"
  "l\030\006 \001(\t\022\014\n\004Imei\030\007 \001(\t\022\016\n\006IpAddr\030\010 \001(\005\"d\n"
  "\rAccountRegReq\022\023\n\013AccountName\030\001 \001(\t\022\020\n\010P"
  "assword\030\002 \001(\t\022\017\n\007Channel\030\003 \001(\005\022\033\n\006RegLog"
  "\030\004 \001(\0132\013.AccountLog\"3\n\rAccountRegAck\022\017\n\007"
  "RetCode\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\004\"\215\001\n\017Acc"
  "ountLoginReq\022\023\n\013AccountName\030\001 \001(\t\022\020\n\010Pas"
  "sword\030\002 \001(\t\022\017\n\007Channel\030\003 \001(\005\022\023\n\013FromChan"
  "nel\030\004 \001(\010\022\016\n\006Review\030\005 \001(\010\022\035\n\010LoginLog\030\006 "
  "\001(\0132\013.AccountLog\"\216\001\n\017AccountLoginAck\022\017\n\007"
  "RetCode\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\004\022\021\n\tLast"
  "SvrID\030\003 \001(\005\022\023\n\013LastSvrName\030\004 \001(\t\022\016\n\006Revi"
  "ew\030\005 \001(\010\022\017\n\007Channel\030\006 \001(\005\022\016\n\006IpAddr\030\007 \001("
  "\005\"Z\n\023ClientServerListReq\022\021\n\tAccountID\030\001 "
  "\001(\004\022\017\n\007Channel\030\002 \001(\005\022\017\n\007Version\030\003 \001(\t\022\016\n"
  "\006Review\030\004 \001(\010\"\177\n\020ClientServerNode\022\r\n\005Svr"
  "ID\030\001 \001(\005\022\017\n\007SvrName\030\002 \001(\t\022\017\n\007SvrFlag\030\003 \001"
  "(\005\022\022\n\nCornerMark\030\004 \001(\005\022\023\n\013SvrOpenTime\030\005 "
  "\001(\003\022\021\n\tSvrStatus\030\006 \001(\005\"J\n\023ClientServerLi"
  "stAck\022\017\n\007RetCode\030\001 \001(\r\022\"\n\007SvrNode\030\002 \003(\0132"
  "\021.ClientServerNode\"I\n\017SelectServerReq\022\021\n"
  "\tAccountID\030\001 \001(\004\022\020\n\010ServerID\030\002 \001(\005\022\021\n\tCh"
  "eckRole\030\003 \001(\010\"\202\001\n\017SelectServerAck\022\017\n\007Ret"
  "Code\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\004\022\020\n\010ServerI"
  "D\030\003 \001(\005\022\022\n\nServerAddr\030\004 \001(\t\022\022\n\nServerPor"
  "t\030\005 \001(\005\022\021\n\tLoginCode\030\006 \001(\005\"i\n\016SealAccoun"
  "tReq\022\023\n\013AccountName\030\001 \001(\t\022\021\n\tAccountID\030\002"
  " \001(\004\022\017\n\007Channel\030\003 \001(\005\022\020\n\010SealTime\030\004 \001(\005\022"
  "\014\n\004Seal\030\005 \001(\010\"[\n\016SealAccountAck\022\017\n\007RetCo"
  "de\030\001 \001(\r\022\023\n\013AccountName\030\002 \001(\t\022\021\n\tAccount"
  "ID\030\003 \001(\004\022\020\n\010ServerID\030\004 \001(\005\"#\n\016SealAccoun"
  "tNtf\022\021\n\tAccountID\030\001 \001(\004\"7\n\020SetLastServer"
  "Nty\022\021\n\tAccountID\030\001 \001(\004\022\020\n\010ServerID\030\002 \001(\005"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Msg_5fAccount_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Msg_5fAccount_2eproto_sccs[16] = {
  &scc_info_AccountLog_Msg_5fAccount_2eproto.base,
  &scc_info_AccountLoginAck_Msg_5fAccount_2eproto.base,
  &scc_info_AccountLoginReq_Msg_5fAccount_2eproto.base,
  &scc_info_AccountRegAck_Msg_5fAccount_2eproto.base,
  &scc_info_AccountRegReq_Msg_5fAccount_2eproto.base,
  &scc_info_CheckVersionAck_Msg_5fAccount_2eproto.base,
  &scc_info_CheckVersionReq_Msg_5fAccount_2eproto.base,
  &scc_info_ClientServerListAck_Msg_5fAccount_2eproto.base,
  &scc_info_ClientServerListReq_Msg_5fAccount_2eproto.base,
  &scc_info_ClientServerNode_Msg_5fAccount_2eproto.base,
  &scc_info_SealAccountAck_Msg_5fAccount_2eproto.base,
  &scc_info_SealAccountNtf_Msg_5fAccount_2eproto.base,
  &scc_info_SealAccountReq_Msg_5fAccount_2eproto.base,
  &scc_info_SelectServerAck_Msg_5fAccount_2eproto.base,
  &scc_info_SelectServerReq_Msg_5fAccount_2eproto.base,
  &scc_info_SetLastServerNty_Msg_5fAccount_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Msg_5fAccount_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_5fAccount_2eproto = {
  false, false, descriptor_table_protodef_Msg_5fAccount_2eproto, "Msg_Account.proto", 1528,
  &descriptor_table_Msg_5fAccount_2eproto_once, descriptor_table_Msg_5fAccount_2eproto_sccs, descriptor_table_Msg_5fAccount_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_Msg_5fAccount_2eproto::offsets,
  file_level_metadata_Msg_5fAccount_2eproto, 16, file_level_enum_descriptors_Msg_5fAccount_2eproto, file_level_service_descriptors_Msg_5fAccount_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Msg_5fAccount_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Msg_5fAccount_2eproto)), true);

// ===================================================================

void CheckVersionReq::InitAsDefaultInstance() {
}
class CheckVersionReq::_Internal {
 public:
};

CheckVersionReq::CheckVersionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CheckVersionReq)
}
CheckVersionReq::CheckVersionReq(const CheckVersionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientverion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientverion().empty()) {
    clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clientverion(),
      GetArena());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:CheckVersionReq)
}

void CheckVersionReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckVersionReq_Msg_5fAccount_2eproto.base);
  clientverion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
}

CheckVersionReq::~CheckVersionReq() {
  // @@protoc_insertion_point(destructor:CheckVersionReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckVersionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientverion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckVersionReq::ArenaDtor(void* object) {
  CheckVersionReq* _this = reinterpret_cast< CheckVersionReq* >(object);
  (void)_this;
}
void CheckVersionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckVersionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckVersionReq& CheckVersionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckVersionReq_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void CheckVersionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckVersionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientverion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckVersionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ClientVerion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientverion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CheckVersionReq.ClientVerion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckVersionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckVersionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClientVerion = 1;
  if (this->clientverion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientverion().data(), static_cast<int>(this->_internal_clientverion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CheckVersionReq.ClientVerion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientverion(), target);
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckVersionReq)
  return target;
}

size_t CheckVersionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckVersionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClientVerion = 1;
  if (this->clientverion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientverion());
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckVersionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckVersionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckVersionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckVersionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckVersionReq)
    MergeFrom(*source);
  }
}

void CheckVersionReq::MergeFrom(const CheckVersionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientverion().size() > 0) {
    _internal_set_clientverion(from._internal_clientverion());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void CheckVersionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionReq::CopyFrom(const CheckVersionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionReq::IsInitialized() const {
  return true;
}

void CheckVersionReq::InternalSwap(CheckVersionReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clientverion_.Swap(&other->clientverion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckVersionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckVersionAck::InitAsDefaultInstance() {
}
class CheckVersionAck::_Internal {
 public:
};

CheckVersionAck::CheckVersionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CheckVersionAck)
}
CheckVersionAck::CheckVersionAck(const CheckVersionAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientverion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientverion().empty()) {
    clientverion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clientverion(),
      GetArena());
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:CheckVersionAck)
}

void CheckVersionAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckVersionAck_Msg_5fAccount_2eproto.base);
  clientverion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
}

CheckVersionAck::~CheckVersionAck() {
  // @@protoc_insertion_point(destructor:CheckVersionAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckVersionAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientverion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckVersionAck::ArenaDtor(void* object) {
  CheckVersionAck* _this = reinterpret_cast< CheckVersionAck* >(object);
  (void)_this;
}
void CheckVersionAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckVersionAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckVersionAck& CheckVersionAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckVersionAck_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void CheckVersionAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckVersionAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientverion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckVersionAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientVerion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientverion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CheckVersionAck.ClientVerion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckVersionAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckVersionAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // string ClientVerion = 2;
  if (this->clientverion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientverion().data(), static_cast<int>(this->_internal_clientverion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CheckVersionAck.ClientVerion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientverion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckVersionAck)
  return target;
}

size_t CheckVersionAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckVersionAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClientVerion = 2;
  if (this->clientverion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientverion());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckVersionAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckVersionAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckVersionAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckVersionAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckVersionAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckVersionAck)
    MergeFrom(*source);
  }
}

void CheckVersionAck::MergeFrom(const CheckVersionAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckVersionAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientverion().size() > 0) {
    _internal_set_clientverion(from._internal_clientverion());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void CheckVersionAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckVersionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionAck::CopyFrom(const CheckVersionAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckVersionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionAck::IsInitialized() const {
  return true;
}

void CheckVersionAck::InternalSwap(CheckVersionAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clientverion_.Swap(&other->clientverion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckVersionAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountLog::InitAsDefaultInstance() {
}
class AccountLog::_Internal {
 public:
};

AccountLog::AccountLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AccountLog)
}
AccountLog::AccountLog(const AccountLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  idfa_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idfa().empty()) {
    idfa_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_idfa(),
      GetArena());
  }
  imodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imodel().empty()) {
    imodel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imodel(),
      GetArena());
  }
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imei(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipaddr_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(ipaddr_));
  // @@protoc_insertion_point(copy_constructor:AccountLog)
}

void AccountLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountLog_Msg_5fAccount_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfa_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipaddr_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(ipaddr_));
}

AccountLog::~AccountLog() {
  // @@protoc_insertion_point(destructor:AccountLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfa_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imodel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountLog::ArenaDtor(void* object) {
  AccountLog* _this = reinterpret_cast< AccountLog* >(object);
  (void)_this;
}
void AccountLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountLog& AccountLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountLog_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void AccountLog::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idfa_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imodel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imei_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipaddr_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(ipaddr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLog.Version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLog.Uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Idfa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_idfa();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLog.Idfa"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Imodel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_imodel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLog.Imodel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Imei = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLog.Imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IpAddr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ipaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string Version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLog.Version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // uint64 AccountID = 3;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_accountid(), target);
  }

  // string Uuid = 4;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLog.Uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  // string Idfa = 5;
  if (this->idfa().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLog.Idfa");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_idfa(), target);
  }

  // string Imodel = 6;
  if (this->imodel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLog.Imodel");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_imodel(), target);
  }

  // string Imei = 7;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLog.Imei");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_imei(), target);
  }

  // int32 IpAddr = 8;
  if (this->ipaddr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ipaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountLog)
  return target;
}

size_t AccountLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string Uuid = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string Idfa = 5;
  if (this->idfa().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idfa());
  }

  // string Imodel = 6;
  if (this->imodel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imodel());
  }

  // string Imei = 7;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // uint64 AccountID = 3;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // int32 Channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // int32 IpAddr = 8;
  if (this->ipaddr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipaddr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountLog)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountLog)
    MergeFrom(*source);
  }
}

void AccountLog::MergeFrom(const AccountLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.idfa().size() > 0) {
    _internal_set_idfa(from._internal_idfa());
  }
  if (from.imodel().size() > 0) {
    _internal_set_imodel(from._internal_imodel());
  }
  if (from.imei().size() > 0) {
    _internal_set_imei(from._internal_imei());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.ipaddr() != 0) {
    _internal_set_ipaddr(from._internal_ipaddr());
  }
}

void AccountLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLog::CopyFrom(const AccountLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLog::IsInitialized() const {
  return true;
}

void AccountLog::InternalSwap(AccountLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idfa_.Swap(&other->idfa_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imodel_.Swap(&other->imodel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountLog, ipaddr_)
      + sizeof(AccountLog::ipaddr_)
      - PROTOBUF_FIELD_OFFSET(AccountLog, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountRegReq::InitAsDefaultInstance() {
  ::_AccountRegReq_default_instance_._instance.get_mutable()->reglog_ = const_cast< ::AccountLog*>(
      ::AccountLog::internal_default_instance());
}
class AccountRegReq::_Internal {
 public:
  static const ::AccountLog& reglog(const AccountRegReq* msg);
};

const ::AccountLog&
AccountRegReq::_Internal::reglog(const AccountRegReq* msg) {
  return *msg->reglog_;
}
AccountRegReq::AccountRegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AccountRegReq)
}
AccountRegReq::AccountRegReq(const AccountRegReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accountname().empty()) {
    accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accountname(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  if (from._internal_has_reglog()) {
    reglog_ = new ::AccountLog(*from.reglog_);
  } else {
    reglog_ = nullptr;
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:AccountRegReq)
}

void AccountRegReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountRegReq_Msg_5fAccount_2eproto.base);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reglog_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&reglog_)) + sizeof(channel_));
}

AccountRegReq::~AccountRegReq() {
  // @@protoc_insertion_point(destructor:AccountRegReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountRegReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accountname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reglog_;
}

void AccountRegReq::ArenaDtor(void* object) {
  AccountRegReq* _this = reinterpret_cast< AccountRegReq* >(object);
  (void)_this;
}
void AccountRegReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountRegReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountRegReq& AccountRegReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountRegReq_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void AccountRegReq::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountRegReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && reglog_ != nullptr) {
    delete reglog_;
  }
  reglog_ = nullptr;
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountRegReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string AccountName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_accountname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountRegReq.AccountName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountRegReq.Password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AccountLog RegLog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reglog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountRegReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountRegReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string AccountName = 1;
  if (this->accountname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accountname().data(), static_cast<int>(this->_internal_accountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountRegReq.AccountName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accountname(), target);
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountRegReq.Password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // int32 Channel = 3;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // .AccountLog RegLog = 4;
  if (this->has_reglog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reglog(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountRegReq)
  return target;
}

size_t AccountRegReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountRegReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AccountName = 1;
  if (this->accountname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .AccountLog RegLog = 4;
  if (this->has_reglog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reglog_);
  }

  // int32 Channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountRegReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountRegReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountRegReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountRegReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountRegReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountRegReq)
    MergeFrom(*source);
  }
}

void AccountRegReq::MergeFrom(const AccountRegReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountRegReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountname().size() > 0) {
    _internal_set_accountname(from._internal_accountname());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.has_reglog()) {
    _internal_mutable_reglog()->::AccountLog::MergeFrom(from._internal_reglog());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void AccountRegReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountRegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRegReq::CopyFrom(const AccountRegReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountRegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRegReq::IsInitialized() const {
  return true;
}

void AccountRegReq::InternalSwap(AccountRegReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accountname_.Swap(&other->accountname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountRegReq, channel_)
      + sizeof(AccountRegReq::channel_)
      - PROTOBUF_FIELD_OFFSET(AccountRegReq, reglog_)>(
          reinterpret_cast<char*>(&reglog_),
          reinterpret_cast<char*>(&other->reglog_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountRegReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountRegAck::InitAsDefaultInstance() {
}
class AccountRegAck::_Internal {
 public:
};

AccountRegAck::AccountRegAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AccountRegAck)
}
AccountRegAck::AccountRegAck(const AccountRegAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:AccountRegAck)
}

void AccountRegAck::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(retcode_));
}

AccountRegAck::~AccountRegAck() {
  // @@protoc_insertion_point(destructor:AccountRegAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountRegAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccountRegAck::ArenaDtor(void* object) {
  AccountRegAck* _this = reinterpret_cast< AccountRegAck* >(object);
  (void)_this;
}
void AccountRegAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountRegAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountRegAck& AccountRegAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountRegAck_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void AccountRegAck::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountRegAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountRegAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountRegAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountRegAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountRegAck)
  return target;
}

size_t AccountRegAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountRegAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountRegAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountRegAck)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountRegAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountRegAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountRegAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountRegAck)
    MergeFrom(*source);
  }
}

void AccountRegAck::MergeFrom(const AccountRegAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountRegAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void AccountRegAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountRegAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRegAck::CopyFrom(const AccountRegAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountRegAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRegAck::IsInitialized() const {
  return true;
}

void AccountRegAck::InternalSwap(AccountRegAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountRegAck, retcode_)
      + sizeof(AccountRegAck::retcode_)
      - PROTOBUF_FIELD_OFFSET(AccountRegAck, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountRegAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountLoginReq::InitAsDefaultInstance() {
  ::_AccountLoginReq_default_instance_._instance.get_mutable()->loginlog_ = const_cast< ::AccountLog*>(
      ::AccountLog::internal_default_instance());
}
class AccountLoginReq::_Internal {
 public:
  static const ::AccountLog& loginlog(const AccountLoginReq* msg);
};

const ::AccountLog&
AccountLoginReq::_Internal::loginlog(const AccountLoginReq* msg) {
  return *msg->loginlog_;
}
AccountLoginReq::AccountLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AccountLoginReq)
}
AccountLoginReq::AccountLoginReq(const AccountLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accountname().empty()) {
    accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accountname(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  if (from._internal_has_loginlog()) {
    loginlog_ = new ::AccountLog(*from.loginlog_);
  } else {
    loginlog_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&review_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(review_));
  // @@protoc_insertion_point(copy_constructor:AccountLoginReq)
}

void AccountLoginReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountLoginReq_Msg_5fAccount_2eproto.base);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&loginlog_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&review_) -
      reinterpret_cast<char*>(&loginlog_)) + sizeof(review_));
}

AccountLoginReq::~AccountLoginReq() {
  // @@protoc_insertion_point(destructor:AccountLoginReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accountname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete loginlog_;
}

void AccountLoginReq::ArenaDtor(void* object) {
  AccountLoginReq* _this = reinterpret_cast< AccountLoginReq* >(object);
  (void)_this;
}
void AccountLoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountLoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountLoginReq& AccountLoginReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountLoginReq_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void AccountLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && loginlog_ != nullptr) {
    delete loginlog_;
  }
  loginlog_ = nullptr;
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&review_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(review_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountLoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string AccountName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_accountname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLoginReq.AccountName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLoginReq.Password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FromChannel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fromchannel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Review = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AccountLog LoginLog = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginlog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountLoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string AccountName = 1;
  if (this->accountname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accountname().data(), static_cast<int>(this->_internal_accountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLoginReq.AccountName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accountname(), target);
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLoginReq.Password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // int32 Channel = 3;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // bool FromChannel = 4;
  if (this->fromchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_fromchannel(), target);
  }

  // bool Review = 5;
  if (this->review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_review(), target);
  }

  // .AccountLog LoginLog = 6;
  if (this->has_loginlog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::loginlog(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountLoginReq)
  return target;
}

size_t AccountLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountLoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AccountName = 1;
  if (this->accountname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .AccountLog LoginLog = 6;
  if (this->has_loginlog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginlog_);
  }

  // int32 Channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // bool FromChannel = 4;
  if (this->fromchannel() != 0) {
    total_size += 1 + 1;
  }

  // bool Review = 5;
  if (this->review() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLoginReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLoginReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountLoginReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountLoginReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountLoginReq)
    MergeFrom(*source);
  }
}

void AccountLoginReq::MergeFrom(const AccountLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountname().size() > 0) {
    _internal_set_accountname(from._internal_accountname());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.has_loginlog()) {
    _internal_mutable_loginlog()->::AccountLog::MergeFrom(from._internal_loginlog());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.fromchannel() != 0) {
    _internal_set_fromchannel(from._internal_fromchannel());
  }
  if (from.review() != 0) {
    _internal_set_review(from._internal_review());
  }
}

void AccountLoginReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginReq::CopyFrom(const AccountLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginReq::IsInitialized() const {
  return true;
}

void AccountLoginReq::InternalSwap(AccountLoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accountname_.Swap(&other->accountname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountLoginReq, review_)
      + sizeof(AccountLoginReq::review_)
      - PROTOBUF_FIELD_OFFSET(AccountLoginReq, loginlog_)>(
          reinterpret_cast<char*>(&loginlog_),
          reinterpret_cast<char*>(&other->loginlog_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLoginReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountLoginAck::InitAsDefaultInstance() {
}
class AccountLoginAck::_Internal {
 public:
};

AccountLoginAck::AccountLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AccountLoginAck)
}
AccountLoginAck::AccountLoginAck(const AccountLoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lastsvrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lastsvrname().empty()) {
    lastsvrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lastsvrname(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipaddr_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(ipaddr_));
  // @@protoc_insertion_point(copy_constructor:AccountLoginAck)
}

void AccountLoginAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountLoginAck_Msg_5fAccount_2eproto.base);
  lastsvrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipaddr_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(ipaddr_));
}

AccountLoginAck::~AccountLoginAck() {
  // @@protoc_insertion_point(destructor:AccountLoginAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountLoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lastsvrname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountLoginAck::ArenaDtor(void* object) {
  AccountLoginAck* _this = reinterpret_cast< AccountLoginAck* >(object);
  (void)_this;
}
void AccountLoginAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountLoginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountLoginAck& AccountLoginAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountLoginAck_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void AccountLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lastsvrname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipaddr_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(ipaddr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountLoginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LastSvrID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastsvrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string LastSvrName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lastsvrname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AccountLoginAck.LastSvrName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Review = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IpAddr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ipaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountLoginAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  // int32 LastSvrID = 3;
  if (this->lastsvrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastsvrid(), target);
  }

  // string LastSvrName = 4;
  if (this->lastsvrname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastsvrname().data(), static_cast<int>(this->_internal_lastsvrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AccountLoginAck.LastSvrName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lastsvrname(), target);
  }

  // bool Review = 5;
  if (this->review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_review(), target);
  }

  // int32 Channel = 6;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_channel(), target);
  }

  // int32 IpAddr = 7;
  if (this->ipaddr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ipaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountLoginAck)
  return target;
}

size_t AccountLoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountLoginAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LastSvrName = 4;
  if (this->lastsvrname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastsvrname());
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 LastSvrID = 3;
  if (this->lastsvrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastsvrid());
  }

  // bool Review = 5;
  if (this->review() != 0) {
    total_size += 1 + 1;
  }

  // int32 Channel = 6;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // int32 IpAddr = 7;
  if (this->ipaddr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipaddr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLoginAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLoginAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountLoginAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountLoginAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountLoginAck)
    MergeFrom(*source);
  }
}

void AccountLoginAck::MergeFrom(const AccountLoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lastsvrname().size() > 0) {
    _internal_set_lastsvrname(from._internal_lastsvrname());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.lastsvrid() != 0) {
    _internal_set_lastsvrid(from._internal_lastsvrid());
  }
  if (from.review() != 0) {
    _internal_set_review(from._internal_review());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.ipaddr() != 0) {
    _internal_set_ipaddr(from._internal_ipaddr());
  }
}

void AccountLoginAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginAck::CopyFrom(const AccountLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginAck::IsInitialized() const {
  return true;
}

void AccountLoginAck::InternalSwap(AccountLoginAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lastsvrname_.Swap(&other->lastsvrname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountLoginAck, ipaddr_)
      + sizeof(AccountLoginAck::ipaddr_)
      - PROTOBUF_FIELD_OFFSET(AccountLoginAck, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLoginAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientServerListReq::InitAsDefaultInstance() {
}
class ClientServerListReq::_Internal {
 public:
};

ClientServerListReq::ClientServerListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClientServerListReq)
}
ClientServerListReq::ClientServerListReq(const ClientServerListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&review_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(review_));
  // @@protoc_insertion_point(copy_constructor:ClientServerListReq)
}

void ClientServerListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientServerListReq_Msg_5fAccount_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&review_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(review_));
}

ClientServerListReq::~ClientServerListReq() {
  // @@protoc_insertion_point(destructor:ClientServerListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientServerListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientServerListReq::ArenaDtor(void* object) {
  ClientServerListReq* _this = reinterpret_cast< ClientServerListReq* >(object);
  (void)_this;
}
void ClientServerListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientServerListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientServerListReq& ClientServerListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientServerListReq_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void ClientServerListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientServerListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&review_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(review_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientServerListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientServerListReq.Version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Review = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientServerListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientServerListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // string Version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientServerListReq.Version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // bool Review = 4;
  if (this->review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_review(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientServerListReq)
  return target;
}

size_t ClientServerListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientServerListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // bool Review = 4;
  if (this->review() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientServerListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientServerListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientServerListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientServerListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientServerListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientServerListReq)
    MergeFrom(*source);
  }
}

void ClientServerListReq::MergeFrom(const ClientServerListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientServerListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.review() != 0) {
    _internal_set_review(from._internal_review());
  }
}

void ClientServerListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientServerListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerListReq::CopyFrom(const ClientServerListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientServerListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerListReq::IsInitialized() const {
  return true;
}

void ClientServerListReq::InternalSwap(ClientServerListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientServerListReq, review_)
      + sizeof(ClientServerListReq::review_)
      - PROTOBUF_FIELD_OFFSET(ClientServerListReq, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientServerListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientServerNode::InitAsDefaultInstance() {
}
class ClientServerNode::_Internal {
 public:
};

ClientServerNode::ClientServerNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClientServerNode)
}
ClientServerNode::ClientServerNode(const ClientServerNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  svrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_svrname().empty()) {
    svrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_svrname(),
      GetArena());
  }
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&svrstatus_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(svrstatus_));
  // @@protoc_insertion_point(copy_constructor:ClientServerNode)
}

void ClientServerNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientServerNode_Msg_5fAccount_2eproto.base);
  svrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svrstatus_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(svrstatus_));
}

ClientServerNode::~ClientServerNode() {
  // @@protoc_insertion_point(destructor:ClientServerNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientServerNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  svrname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientServerNode::ArenaDtor(void* object) {
  ClientServerNode* _this = reinterpret_cast< ClientServerNode* >(object);
  (void)_this;
}
void ClientServerNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientServerNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientServerNode& ClientServerNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientServerNode_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void ClientServerNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientServerNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svrname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svrstatus_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(svrstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientServerNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 SvrID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SvrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_svrname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientServerNode.SvrName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SvrFlag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          svrflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CornerMark = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cornermark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 SvrOpenTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          svropentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SvrStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          svrstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientServerNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientServerNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SvrID = 1;
  if (this->svrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svrid(), target);
  }

  // string SvrName = 2;
  if (this->svrname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svrname().data(), static_cast<int>(this->_internal_svrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientServerNode.SvrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_svrname(), target);
  }

  // int32 SvrFlag = 3;
  if (this->svrflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_svrflag(), target);
  }

  // int32 CornerMark = 4;
  if (this->cornermark() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cornermark(), target);
  }

  // int64 SvrOpenTime = 5;
  if (this->svropentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_svropentime(), target);
  }

  // int32 SvrStatus = 6;
  if (this->svrstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_svrstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientServerNode)
  return target;
}

size_t ClientServerNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientServerNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SvrName = 2;
  if (this->svrname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svrname());
  }

  // int32 SvrID = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrid());
  }

  // int32 SvrFlag = 3;
  if (this->svrflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrflag());
  }

  // int64 SvrOpenTime = 5;
  if (this->svropentime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_svropentime());
  }

  // int32 CornerMark = 4;
  if (this->cornermark() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cornermark());
  }

  // int32 SvrStatus = 6;
  if (this->svrstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svrstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientServerNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientServerNode)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientServerNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientServerNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientServerNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientServerNode)
    MergeFrom(*source);
  }
}

void ClientServerNode::MergeFrom(const ClientServerNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientServerNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svrname().size() > 0) {
    _internal_set_svrname(from._internal_svrname());
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.svrflag() != 0) {
    _internal_set_svrflag(from._internal_svrflag());
  }
  if (from.svropentime() != 0) {
    _internal_set_svropentime(from._internal_svropentime());
  }
  if (from.cornermark() != 0) {
    _internal_set_cornermark(from._internal_cornermark());
  }
  if (from.svrstatus() != 0) {
    _internal_set_svrstatus(from._internal_svrstatus());
  }
}

void ClientServerNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientServerNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerNode::CopyFrom(const ClientServerNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientServerNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerNode::IsInitialized() const {
  return true;
}

void ClientServerNode::InternalSwap(ClientServerNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  svrname_.Swap(&other->svrname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientServerNode, svrstatus_)
      + sizeof(ClientServerNode::svrstatus_)
      - PROTOBUF_FIELD_OFFSET(ClientServerNode, svrid_)>(
          reinterpret_cast<char*>(&svrid_),
          reinterpret_cast<char*>(&other->svrid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientServerNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientServerListAck::InitAsDefaultInstance() {
}
class ClientServerListAck::_Internal {
 public:
};

ClientServerListAck::ClientServerListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  svrnode_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClientServerListAck)
}
ClientServerListAck::ClientServerListAck(const ClientServerListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      svrnode_(from.svrnode_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:ClientServerListAck)
}

void ClientServerListAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientServerListAck_Msg_5fAccount_2eproto.base);
  retcode_ = 0u;
}

ClientServerListAck::~ClientServerListAck() {
  // @@protoc_insertion_point(destructor:ClientServerListAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientServerListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientServerListAck::ArenaDtor(void* object) {
  ClientServerListAck* _this = reinterpret_cast< ClientServerListAck* >(object);
  (void)_this;
}
void ClientServerListAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientServerListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientServerListAck& ClientServerListAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientServerListAck_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void ClientServerListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientServerListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svrnode_.Clear();
  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientServerListAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ClientServerNode SvrNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svrnode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientServerListAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientServerListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // repeated .ClientServerNode SvrNode = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_svrnode_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_svrnode(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientServerListAck)
  return target;
}

size_t ClientServerListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientServerListAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClientServerNode SvrNode = 2;
  total_size += 1UL * this->_internal_svrnode_size();
  for (const auto& msg : this->svrnode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientServerListAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientServerListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientServerListAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientServerListAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientServerListAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientServerListAck)
    MergeFrom(*source);
  }
}

void ClientServerListAck::MergeFrom(const ClientServerListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientServerListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svrnode_.MergeFrom(from.svrnode_);
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void ClientServerListAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientServerListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerListAck::CopyFrom(const ClientServerListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientServerListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerListAck::IsInitialized() const {
  return true;
}

void ClientServerListAck::InternalSwap(ClientServerListAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  svrnode_.InternalSwap(&other->svrnode_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientServerListAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectServerReq::InitAsDefaultInstance() {
}
class SelectServerReq::_Internal {
 public:
};

SelectServerReq::SelectServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SelectServerReq)
}
SelectServerReq::SelectServerReq(const SelectServerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkrole_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(checkrole_));
  // @@protoc_insertion_point(copy_constructor:SelectServerReq)
}

void SelectServerReq::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkrole_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(checkrole_));
}

SelectServerReq::~SelectServerReq() {
  // @@protoc_insertion_point(destructor:SelectServerReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectServerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectServerReq::ArenaDtor(void* object) {
  SelectServerReq* _this = reinterpret_cast< SelectServerReq* >(object);
  (void)_this;
}
void SelectServerReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectServerReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectServerReq& SelectServerReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectServerReq_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void SelectServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SelectServerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkrole_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(checkrole_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectServerReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool CheckRole = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          checkrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectServerReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SelectServerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serverid(), target);
  }

  // bool CheckRole = 3;
  if (this->checkrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_checkrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelectServerReq)
  return target;
}

size_t SelectServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SelectServerReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // bool CheckRole = 3;
  if (this->checkrole() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectServerReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SelectServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectServerReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectServerReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SelectServerReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SelectServerReq)
    MergeFrom(*source);
  }
}

void SelectServerReq::MergeFrom(const SelectServerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SelectServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.checkrole() != 0) {
    _internal_set_checkrole(from._internal_checkrole());
  }
}

void SelectServerReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SelectServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectServerReq::CopyFrom(const SelectServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SelectServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectServerReq::IsInitialized() const {
  return true;
}

void SelectServerReq::InternalSwap(SelectServerReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectServerReq, checkrole_)
      + sizeof(SelectServerReq::checkrole_)
      - PROTOBUF_FIELD_OFFSET(SelectServerReq, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectServerReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectServerAck::InitAsDefaultInstance() {
}
class SelectServerAck::_Internal {
 public:
};

SelectServerAck::SelectServerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SelectServerAck)
}
SelectServerAck::SelectServerAck(const SelectServerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serveraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serveraddr().empty()) {
    serveraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serveraddr(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logincode_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(logincode_));
  // @@protoc_insertion_point(copy_constructor:SelectServerAck)
}

void SelectServerAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectServerAck_Msg_5fAccount_2eproto.base);
  serveraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(logincode_));
}

SelectServerAck::~SelectServerAck() {
  // @@protoc_insertion_point(destructor:SelectServerAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectServerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serveraddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectServerAck::ArenaDtor(void* object) {
  SelectServerAck* _this = reinterpret_cast< SelectServerAck* >(object);
  (void)_this;
}
void SelectServerAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectServerAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectServerAck& SelectServerAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectServerAck_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void SelectServerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SelectServerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serveraddr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(logincode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectServerAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serveraddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SelectServerAck.ServerAddr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LoginCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          logincode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectServerAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SelectServerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  // int32 ServerID = 3;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serverid(), target);
  }

  // string ServerAddr = 4;
  if (this->serveraddr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serveraddr().data(), static_cast<int>(this->_internal_serveraddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SelectServerAck.ServerAddr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serveraddr(), target);
  }

  // int32 ServerPort = 5;
  if (this->serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_serverport(), target);
  }

  // int32 LoginCode = 6;
  if (this->logincode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_logincode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelectServerAck)
  return target;
}

size_t SelectServerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SelectServerAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerAddr = 4;
  if (this->serveraddr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serveraddr());
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 ServerID = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // int32 ServerPort = 5;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverport());
  }

  // int32 LoginCode = 6;
  if (this->logincode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logincode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectServerAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SelectServerAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectServerAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectServerAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SelectServerAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SelectServerAck)
    MergeFrom(*source);
  }
}

void SelectServerAck::MergeFrom(const SelectServerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SelectServerAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serveraddr().size() > 0) {
    _internal_set_serveraddr(from._internal_serveraddr());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.serverport() != 0) {
    _internal_set_serverport(from._internal_serverport());
  }
  if (from.logincode() != 0) {
    _internal_set_logincode(from._internal_logincode());
  }
}

void SelectServerAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SelectServerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectServerAck::CopyFrom(const SelectServerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SelectServerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectServerAck::IsInitialized() const {
  return true;
}

void SelectServerAck::InternalSwap(SelectServerAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serveraddr_.Swap(&other->serveraddr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectServerAck, logincode_)
      + sizeof(SelectServerAck::logincode_)
      - PROTOBUF_FIELD_OFFSET(SelectServerAck, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectServerAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SealAccountReq::InitAsDefaultInstance() {
}
class SealAccountReq::_Internal {
 public:
};

SealAccountReq::SealAccountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SealAccountReq)
}
SealAccountReq::SealAccountReq(const SealAccountReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accountname().empty()) {
    accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accountname(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seal_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(seal_));
  // @@protoc_insertion_point(copy_constructor:SealAccountReq)
}

void SealAccountReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SealAccountReq_Msg_5fAccount_2eproto.base);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seal_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(seal_));
}

SealAccountReq::~SealAccountReq() {
  // @@protoc_insertion_point(destructor:SealAccountReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SealAccountReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accountname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SealAccountReq::ArenaDtor(void* object) {
  SealAccountReq* _this = reinterpret_cast< SealAccountReq* >(object);
  (void)_this;
}
void SealAccountReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SealAccountReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SealAccountReq& SealAccountReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SealAccountReq_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void SealAccountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SealAccountReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seal_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(seal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SealAccountReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string AccountName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_accountname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SealAccountReq.AccountName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SealTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sealtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Seal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SealAccountReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SealAccountReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string AccountName = 1;
  if (this->accountname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accountname().data(), static_cast<int>(this->_internal_accountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SealAccountReq.AccountName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accountname(), target);
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  // int32 Channel = 3;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // int32 SealTime = 4;
  if (this->sealtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sealtime(), target);
  }

  // bool Seal = 5;
  if (this->seal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_seal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SealAccountReq)
  return target;
}

size_t SealAccountReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SealAccountReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AccountName = 1;
  if (this->accountname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // int32 Channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // int32 SealTime = 4;
  if (this->sealtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sealtime());
  }

  // bool Seal = 5;
  if (this->seal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SealAccountReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SealAccountReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SealAccountReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SealAccountReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SealAccountReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SealAccountReq)
    MergeFrom(*source);
  }
}

void SealAccountReq::MergeFrom(const SealAccountReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SealAccountReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountname().size() > 0) {
    _internal_set_accountname(from._internal_accountname());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.sealtime() != 0) {
    _internal_set_sealtime(from._internal_sealtime());
  }
  if (from.seal() != 0) {
    _internal_set_seal(from._internal_seal());
  }
}

void SealAccountReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SealAccountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealAccountReq::CopyFrom(const SealAccountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SealAccountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealAccountReq::IsInitialized() const {
  return true;
}

void SealAccountReq::InternalSwap(SealAccountReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accountname_.Swap(&other->accountname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SealAccountReq, seal_)
      + sizeof(SealAccountReq::seal_)
      - PROTOBUF_FIELD_OFFSET(SealAccountReq, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SealAccountReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SealAccountAck::InitAsDefaultInstance() {
}
class SealAccountAck::_Internal {
 public:
};

SealAccountAck::SealAccountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SealAccountAck)
}
SealAccountAck::SealAccountAck(const SealAccountAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accountname().empty()) {
    accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accountname(),
      GetArena());
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:SealAccountAck)
}

void SealAccountAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SealAccountAck_Msg_5fAccount_2eproto.base);
  accountname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(accountid_));
}

SealAccountAck::~SealAccountAck() {
  // @@protoc_insertion_point(destructor:SealAccountAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SealAccountAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accountname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SealAccountAck::ArenaDtor(void* object) {
  SealAccountAck* _this = reinterpret_cast< SealAccountAck* >(object);
  (void)_this;
}
void SealAccountAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SealAccountAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SealAccountAck& SealAccountAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SealAccountAck_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void SealAccountAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SealAccountAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(accountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SealAccountAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string AccountName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_accountname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SealAccountAck.AccountName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SealAccountAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SealAccountAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // string AccountName = 2;
  if (this->accountname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accountname().data(), static_cast<int>(this->_internal_accountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SealAccountAck.AccountName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accountname(), target);
  }

  // uint64 AccountID = 3;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_accountid(), target);
  }

  // int32 ServerID = 4;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SealAccountAck)
  return target;
}

size_t SealAccountAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SealAccountAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AccountName = 2;
  if (this->accountname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 ServerID = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // uint64 AccountID = 3;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SealAccountAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SealAccountAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SealAccountAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SealAccountAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SealAccountAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SealAccountAck)
    MergeFrom(*source);
  }
}

void SealAccountAck::MergeFrom(const SealAccountAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SealAccountAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountname().size() > 0) {
    _internal_set_accountname(from._internal_accountname());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void SealAccountAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SealAccountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealAccountAck::CopyFrom(const SealAccountAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SealAccountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealAccountAck::IsInitialized() const {
  return true;
}

void SealAccountAck::InternalSwap(SealAccountAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accountname_.Swap(&other->accountname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SealAccountAck, accountid_)
      + sizeof(SealAccountAck::accountid_)
      - PROTOBUF_FIELD_OFFSET(SealAccountAck, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SealAccountAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SealAccountNtf::InitAsDefaultInstance() {
}
class SealAccountNtf::_Internal {
 public:
};

SealAccountNtf::SealAccountNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SealAccountNtf)
}
SealAccountNtf::SealAccountNtf(const SealAccountNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:SealAccountNtf)
}

void SealAccountNtf::SharedCtor() {
  accountid_ = PROTOBUF_ULONGLONG(0);
}

SealAccountNtf::~SealAccountNtf() {
  // @@protoc_insertion_point(destructor:SealAccountNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SealAccountNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SealAccountNtf::ArenaDtor(void* object) {
  SealAccountNtf* _this = reinterpret_cast< SealAccountNtf* >(object);
  (void)_this;
}
void SealAccountNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SealAccountNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SealAccountNtf& SealAccountNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SealAccountNtf_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void SealAccountNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:SealAccountNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SealAccountNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SealAccountNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SealAccountNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SealAccountNtf)
  return target;
}

size_t SealAccountNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SealAccountNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SealAccountNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SealAccountNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const SealAccountNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SealAccountNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SealAccountNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SealAccountNtf)
    MergeFrom(*source);
  }
}

void SealAccountNtf::MergeFrom(const SealAccountNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SealAccountNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void SealAccountNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SealAccountNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealAccountNtf::CopyFrom(const SealAccountNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SealAccountNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealAccountNtf::IsInitialized() const {
  return true;
}

void SealAccountNtf::InternalSwap(SealAccountNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SealAccountNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetLastServerNty::InitAsDefaultInstance() {
}
class SetLastServerNty::_Internal {
 public:
};

SetLastServerNty::SetLastServerNty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetLastServerNty)
}
SetLastServerNty::SetLastServerNty(const SetLastServerNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:SetLastServerNty)
}

void SetLastServerNty::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(serverid_));
}

SetLastServerNty::~SetLastServerNty() {
  // @@protoc_insertion_point(destructor:SetLastServerNty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLastServerNty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetLastServerNty::ArenaDtor(void* object) {
  SetLastServerNty* _this = reinterpret_cast< SetLastServerNty* >(object);
  (void)_this;
}
void SetLastServerNty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLastServerNty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLastServerNty& SetLastServerNty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLastServerNty_Msg_5fAccount_2eproto.base);
  return *internal_default_instance();
}


void SetLastServerNty::Clear() {
// @@protoc_insertion_point(message_clear_start:SetLastServerNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLastServerNty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLastServerNty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetLastServerNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetLastServerNty)
  return target;
}

size_t SetLastServerNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetLastServerNty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLastServerNty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetLastServerNty)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLastServerNty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLastServerNty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetLastServerNty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetLastServerNty)
    MergeFrom(*source);
  }
}

void SetLastServerNty::MergeFrom(const SetLastServerNty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetLastServerNty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
}

void SetLastServerNty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetLastServerNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLastServerNty::CopyFrom(const SetLastServerNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetLastServerNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLastServerNty::IsInitialized() const {
  return true;
}

void SetLastServerNty::InternalSwap(SetLastServerNty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetLastServerNty, serverid_)
      + sizeof(SetLastServerNty::serverid_)
      - PROTOBUF_FIELD_OFFSET(SetLastServerNty, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLastServerNty::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CheckVersionReq* Arena::CreateMaybeMessage< ::CheckVersionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CheckVersionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CheckVersionAck* Arena::CreateMaybeMessage< ::CheckVersionAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CheckVersionAck >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountLog* Arena::CreateMaybeMessage< ::AccountLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountLog >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountRegReq* Arena::CreateMaybeMessage< ::AccountRegReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountRegReq >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountRegAck* Arena::CreateMaybeMessage< ::AccountRegAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountRegAck >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountLoginReq* Arena::CreateMaybeMessage< ::AccountLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountLoginAck* Arena::CreateMaybeMessage< ::AccountLoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountLoginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientServerListReq* Arena::CreateMaybeMessage< ::ClientServerListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientServerListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientServerNode* Arena::CreateMaybeMessage< ::ClientServerNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientServerNode >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientServerListAck* Arena::CreateMaybeMessage< ::ClientServerListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientServerListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SelectServerReq* Arena::CreateMaybeMessage< ::SelectServerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SelectServerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SelectServerAck* Arena::CreateMaybeMessage< ::SelectServerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SelectServerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SealAccountReq* Arena::CreateMaybeMessage< ::SealAccountReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SealAccountReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SealAccountAck* Arena::CreateMaybeMessage< ::SealAccountAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SealAccountAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SealAccountNtf* Arena::CreateMaybeMessage< ::SealAccountNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SealAccountNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::SetLastServerNty* Arena::CreateMaybeMessage< ::SetLastServerNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetLastServerNty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
